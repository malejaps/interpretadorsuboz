#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.0 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 28 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wxmedia\0"
4 1 8 #"wximage\0"
2 0 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 40 #"(lib \"image-core.ss\" \"2htdp\" \"private\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 56
#"(lib \"hrule-snip.ss\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 15 #"test-case-box%\0"
2 0 1 6 #"wxloc\0"
          0 0 90 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 8 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 8 24
#"drscheme:text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 0 1
#"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 49 #"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 116 0 0 0
0 -1 -1 2 50 #"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 116 0 0 0
0 -1 -1 2 48 #"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 142 28 0
0 0 -1 -1 2 49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 142 28 0
0 0 -1 -1 2 26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 2 27 #"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 0 1 #"\0"
0 75 1 #"\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 34 139 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 176 48 96 0
0 0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 107 142 35 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 100 149 237
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 70 130 180 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 47 79 79 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 139 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 75 0 130 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 160 32 240 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 165 0 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 250 128 114
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 184 134 11 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 128 0 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 169 169 169
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 1 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 8 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 8 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
228 225 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 224
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 224
255 255 -1 -1           0 11825 0 26 3 10 #"#lang eopl"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"require"
0 0 4 3 1 #" "
0 0 14 3 13 #"racket/vector"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 12 #"Integrantes:"
0 0 17 29 1 #"\n"
0 0 17 3 30 #" Maria Alejandra Pabon 1310263"
0 0 17 29 1 #"\n"
0 0 17 3 30 #" Mayerly Suarez        1310284"
0 0 17 29 1 #"\n"
0 0 17 3 30 #" Edwin Gamboa          1310233"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"ENTERGA FINAL 18/12/2013"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 4 29 1 #"\n"
0 0 17 3 1 #";"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 91
(
 #";*******************************************************************"
 #"***********************"
) 0 0 4 29 1 #"\n"
0 0 17 3 22 #";;Interpretador subOZ."
0 0 4 29 1 #"\n"
0 0 17 3 19 #";;Interpretador con"
0 0 4 29 1 #"\n"
0 0 17 3 69
(
 #";;definici\303\263n BNF, especificaci\303\263n lexica, especificacio"
 #"n sintactica "
) 0 0 4 29 1 #"\n"
0 0 17 3 93
(
 #";;datatypes automaticos y manuales que se generan para la sintaxis a"
 #"bstracta de la gram\303\241tica"
) 0 0 4 29 1 #"\n"
0 0 17 3 152
(
 #";;definici\303\263n de tipos y estructuras de datos con sus operacio"
 #"nes: ambiente, almacen (store), registro, procedimiento, variable, v"
 #"acio (usado para skip)"
) 0 0 4 29 1 #"\n"
0 0 17 3 122
(
 #";;Programa, cuerpo,aplicacion de funciones y procedimientos, primiti"
 #"vas y sus aplicaciones con chequeo dinamico de tipos, "
) 0 0 4 29 1 #"\n"
0 0 17 3 12 #";unificacion"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 8 #"n\303\272meros"
0 0 17 3 1 #"("
0 0 17 3 7 #"enteros"
0 0 17 3 1 #" "
0 0 17 3 1 #"y"
0 0 17 3 1 #" "
0 0 17 3 9 #"flotantes"
0 0 17 3 1 #")"
0 0 17 3 56 #", variable,variable local, condicionales, ciclos, listas"
0 0 4 29 1 #"\n"
0 0 17 3 91
(
 #";*******************************************************************"
 #"***********************"
) 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 51 #";;Definici\303\263n BNF para las expresiones del lenguaje"
0 0 4 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 4 29 1 #"\n"
0 0 17 3 31 #";;  <programa>  ::= <expresion>"
0 0 4 29 1 #"\n"
0 0 17 3 38 #";;                  <a-program (exp)> "
0 0 4 29 1 #"\n"
0 0 17 3 34 #";;  <cuerpo>    ::= {<expresion>}+"
0 0 4 29 1 #"\n"
0 0 17 3 36 #";;                  <cuerpoc (exps)>"
0 0 4 29 1 #"\n"
0 0 17 3 31 #";;  <expresion> ::= <variable> "
0 0 4 29 1 #"\n"
0 0 17 3 33 #";;                  <var-exp(id)>"
0 0 4 29 1 #"\n"
0 0 17 3 55 #";;              ::= local {<variable>}+ in <cuerpo> end"
0 0 4 29 1 #"\n"
0 0 17 3 44 #";;                  <local-exp(vars cuerpo)>"
0 0 4 29 1 #"\n"
0 0 17 3 49 #";;              ::= set <expresion> = <expresion>"
0 0 4 29 1 #"\n"
0 0 17 3 62
#";;                  <set-exp(exp1 exp2)>                      "
0 0 4 29 1 #"\n"
0 0 17 3 52 #";;              ::= <primitiva> \"{\"{<expresion>}*\"}\""
0 0 4 29 1 #"\n"
0 0 17 3 43 #";;                  <prim-exp (prim rands)>"
0 0 4 29 1 #"\n"
0 0 17 3 28 #";;              ::= <entero>"
0 0 4 29 1 #"\n"
0 0 17 3 37 #";;                  <entero-exp(ent)>"
0 0 4 29 1 #"\n"
0 0 17 3 30 #";;              ::= <flotante>"
0 0 4 29 1 #"\n"
0 0 17 3 39 #";;                  <flotante-exp(flt)>"
0 0 4 29 1 #"\n"
0 0 17 3 62
#";;              ::= <atomorec>  {<campo> \":\" <expresion>}+ \")\""
0 0 4 29 1 #"\n"
0 0 17 3 54 #";;                  <record-exp1(label features exps)>"
0 0 4 29 1 #"\n"
0 0 17 3 27 #";;              ::= <atomo>"
0 0 4 29 1 #"\n"
0 0 17 3 40 #";;                  <record-exp2(label)>"
0 0 4 29 1 #"\n"
0 0 17 3 40 #";;              ::= \"[\"{<expresion>}+\"]\""
0 0 4 29 1 #"\n"
0 0 17 3 37 #";;                  <list-exp(exps)>+"
0 0 4 29 1 #"\n"
0 0 17 3 45 #";;              ::= \".\"<expresion>\".\" <campo>"
0 0 4 29 1 #"\n"
0 0 17 3 53 #";;                  <asg-record-exp(expreg expcampo)>"
0 0 4 29 1 #"\n"
0 0 17 3 70
(
 #";;              ::= proc \"{\"<nombre-proc>{<variable>}*\"}\" <cuerp"
 #"o> end"
) 0 0 4 29 1 #"\n"
0 0 17 3 50 #";;                  <proc-exp(nombre vars cuerpo)>"
0 0 4 29 1 #"\n"
0 0 17 3 69
(
 #";;              ::= fun\"{\"<nombre-proc> {<variable>}*\"}\" <cuerpo"
 #"> end"
) 0 0 4 29 1 #"\n"
0 0 17 3 49 #";;                  <fun-exp(nombre vars cuerpo)>"
0 0 4 29 1 #"\n"
0 0 17 3 51 #";;              ::= \"{\"<expresion>{<expresion>}*\"}\""
0 0 4 29 1 #"\n"
0 0 17 3 42 #";;                  <app-exp(rator rands)>"
0 0 4 29 1 #"\n"
0 0 17 3 54 #";;              ::= if <expresion> then <cuerpo> <fin>"
0 0 4 29 1 #"\n"
0 0 17 3 51 #";;                  <if-exp(cond-exp true-exp fin)>"
0 0 4 29 1 #"\n"
0 0 17 3 24 #";;              ::= skip"
0 0 4 29 1 #"\n"
0 0 17 3 30 #";;                  <skip-exp>"
0 0 4 29 1 #"\n"
0 0 17 3 79
(
 #";;              ::= for <variable> in <expresion>.. <expresion> do <"
 #"cuerpo> end"
) 0 0 4 29 1 #"\n"
0 0 17 3 58
#";;                  <for-exp (var exp-ini exp-fin cuerpo)>"
0 0 4 29 1 #"\n"
0 0 17 3 25 #";;       <fin>  ::= \"end\""
0 0 4 29 1 #"\n"
0 0 17 3 25 #";;                  <end>"
0 0 4 29 1 #"\n"
0 0 17 3 41 #";;              ::= \"else\" <cuerpo> \"end\""
0 0 4 29 1 #"\n"
0 0 17 3 32 #";;                  <else (cpo)>"
0 0 4 29 1 #"\n"
0 0 17 3 27 #";;      <campo> ::= <atomo>"
0 0 4 29 1 #"\n"
0 0 17 3 37 #";;                  <campo-1 (camp1)>"
0 0 4 29 1 #"\n"
0 0 17 3 28 #";;              ::= <entero>"
0 0 4 29 1 #"\n"
0 0 17 3 37 #";;                  <campo-2 (camp2)>"
0 0 4 29 1 #"\n"
0 0 17 3 23 #";;<nombre-proc> ::= \"$\""
0 0 4 29 1 #"\n"
0 0 17 3 38 #";;                  <nombre-proc-anon>"
0 0 4 29 1 #"\n"
0 0 17 3 30 #";;              ::= <variable>"
0 0 4 29 1 #"\n"
0 0 17 3 61
#";;                  nombre-proc-var(nombre-var)              "
0 0 4 29 1 #"\n"
0 0 17 3 28 #";;  <primitiva> ::= \"isdet?\""
0 0 4 29 1 #"\n"
0 0 17 3 32 #";;                  <isdet-prim>"
0 0 4 29 1 #"\n"
0 0 17 3 29 #";;              ::= \"isfree?\""
0 0 4 29 1 #"\n"
0 0 17 3 49 #";;                  <isfree-prim>;;              "
0 0 4 29 1 #"\n"
0 0 17 3 23 #";;              ::= \"+\""
0 0 4 29 1 #"\n"
0 0 17 3 30 #";;                  <sum-prim>"
0 0 4 29 1 #"\n"
0 0 17 3 23 #";;              ::= \"*\""
0 0 4 29 1 #"\n"
0 0 17 3 31 #";;                  <mult-prim>"
0 0 4 29 1 #"\n"
0 0 17 3 23 #";;              ::= \"-\""
0 0 4 29 1 #"\n"
0 0 17 3 30 #";;                  <sub-prim>"
0 0 4 29 1 #"\n"
0 0 17 3 23 #";;              ::= \"/\""
0 0 4 29 1 #"\n"
0 0 17 3 30 #";;                  <div-prim>"
0 0 4 29 1 #"\n"
0 0 17 3 23 #";;              ::= \"<\""
0 0 4 29 1 #"\n"
0 0 17 3 32 #";;                  <menor-prim>"
0 0 4 29 1 #"\n"
0 0 17 3 24 #";;              ::= \"=<\""
0 0 4 29 1 #"\n"
0 0 17 3 32 #";;                  <meneq-prim>"
0 0 4 29 1 #"\n"
0 0 17 3 23 #";;              ::= \">\""
0 0 4 29 1 #"\n"
0 0 17 3 32 #";;                  <mayor-prim>"
0 0 4 29 1 #"\n"
0 0 17 3 24 #";;              ::= \">=\""
0 0 4 29 1 #"\n"
0 0 17 3 32 #";;                  <mayig-prim>"
0 0 4 29 1 #"\n"
0 0 17 3 24 #";;              ::= \"==\""
0 0 4 29 1 #"\n"
0 0 17 3 32 #";;                  <igual-prim>"
0 0 4 29 1 #"\n"
0 0 17 3 28 #";;              ::= \"orelse\""
0 0 4 29 1 #"\n"
0 0 17 3 33 #";;                  <orelse-prim>"
0 0 4 29 1 #"\n"
0 0 17 3 29 #";;              ::= \"andthen\""
0 0 4 29 1 #"\n"
0 0 17 3 34 #";;                  <andthen-prim>"
0 0 4 29 1 #"\n"
0 0 17 3 23 #";;              ::= \"=\""
0 0 4 29 1 #"\n"
0 0 17 3 31 #";;                  <unif-prim>"
0 0 4 29 1 #"\n"
0 0 17 3 16 #";;              "
0 0 4 29 1 #"\n"
0 0 17 3 91
(
 #";*******************************************************************"
 #"***********************"
) 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 91
(
 #";*******************************************************************"
 #"***********************"
) 0 0 4 29 1 #"\n"
0 0 17 3 24 #";Especificaci\303\263n L\303\251xica"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 31 #"scanner-spec-simple-interpreter"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 14 3 7 #"espacio"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"whitespace"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 14 3 4 #"skip"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 10 #"comentario"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 19 3 3 #"\"%\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"arbno"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 20 3 9 #"#\\newline"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 14 3 4 #"skip"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 8 #"variable"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 2 #"or"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"_\""
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"("
0 0 14 3 6 #"concat"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"or"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"C\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"D\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"E\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"F\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"G\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"H\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"I\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"J\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"K\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"L\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"M\""
0 0 4 29 1 #"\n"
0 0 4 3 31 #"                               "
0 0 19 3 3 #"\"N\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"O\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"P\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"Q\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"R\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"S\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"U\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"V\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"W\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"X\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"Z\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 27 #"                           "
0 0 22 3 1 #"("
0 0 14 3 5 #"arbno"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"or"
0 0 4 3 1 #" "
0 0 14 3 6 #"letter"
0 0 4 3 1 #" "
0 0 14 3 5 #"digit"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"_\""
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 14 3 6 #"symbol"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 5 #"atomo"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 2 #"or"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"concat"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"or"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"b\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"e\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"f\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"g\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"h\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"i\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"j\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"k\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"l\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"m\""
0 0 4 29 1 #"\n"
0 0 4 3 28 #"                            "
0 0 19 3 3 #"\"n\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"o\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"p\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"q\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"r\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"s\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"t\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"u\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"v\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"w\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"y\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"z\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                        "
0 0 22 3 1 #"("
0 0 14 3 5 #"arbno"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"or"
0 0 4 3 1 #" "
0 0 14 3 6 #"letter"
0 0 4 3 1 #" "
0 0 14 3 5 #"digit"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"_\""
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 1 #"("
0 0 14 3 6 #"concat"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"'\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"arbno"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 20 3 3 #"#\\'"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"'\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 19 3 5 #"\"'|'\""
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 19 3 3 #"\"|\""
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 14 3 6 #"symbol"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 8 #"atomorec"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 2 #"or"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"concat"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"or"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"b\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"e\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"f\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"g\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"h\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"i\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"j\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"k\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"l\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"m\""
0 0 4 29 1 #"\n"
0 0 4 3 31 #"                               "
0 0 19 3 3 #"\"n\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"o\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"p\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"q\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"r\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"s\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"t\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"u\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"v\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"w\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"y\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"z\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 27 #"                           "
0 0 22 3 1 #"("
0 0 14 3 5 #"arbno"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"or"
0 0 4 3 1 #" "
0 0 14 3 6 #"letter"
0 0 4 3 1 #" "
0 0 14 3 5 #"digit"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"_\""
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"("
0 0 14 3 6 #"concat"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"'\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"arbno"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 20 3 3 #"#\\'"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"'\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 19 3 5 #"\"'|'\""
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 19 3 3 #"\"|\""
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 14 3 6 #"symbol"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 6 #"entero"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 2 #"or"
0 0 4 3 1 #" "
0 0 14 3 5 #"digit"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"concat"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"~\""
0 0 4 3 1 #" "
0 0 14 3 5 #"digit"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"arbno"
0 0 4 3 1 #" "
0 0 14 3 5 #"digit"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 14 3 6 #"string"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 8 #"flotante"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 2 #"or"
0 0 4 3 1 #" "
0 0 14 3 5 #"digit"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"concat"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"~\""
0 0 4 3 1 #" "
0 0 14 3 5 #"digit"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"arbno"
0 0 4 3 1 #" "
0 0 14 3 5 #"digit"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 19 3 3 #"\".\""
0 0 4 3 1 #" "
0 0 14 3 5 #"digit"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"arbno"
0 0 4 3 1 #" "
0 0 14 3 5 #"digit"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 14 3 6 #"string"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 41
#";Especificaci\303\263n Sint\303\241ctica (gram\303\241tica)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 26 #"grammar-simple-interpreter"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 10 #";;Programa"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 8 #"programa"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"expresion"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 14 3 9 #"a-program"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 23 #";;Cuerpo de uso general"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 6 #"cuerpo"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"arbno"
0 0 4 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 14 3 7 #"cuerpoc"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 11 #";;Variables"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"variable"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 14 3 7 #"var-exp"
0 0 22 3 1 #")"
0 0 4 3 5 #"     "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 31 #";;Creacion de variables locales"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 19 3 7 #"\"local\""
0 0 4 3 1 #" "
0 0 14 3 8 #"variable"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"arbno"
0 0 4 3 1 #" "
0 0 14 3 8 #"variable"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 19 3 4 #"\"in\""
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 4 3 1 #" "
0 0 19 3 5 #"\"end\""
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 14 3 9 #"local-exp"
0 0 22 3 1 #")"
0 0 4 3 5 #"     "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 12 #";;Asignacion"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 19 3 5 #"\"set\""
0 0 4 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 4 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 14 3 7 #"set-exp"
0 0 22 3 1 #")"
0 0 4 3 5 #"     "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 9 #";;Numeros"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"entero"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 14 3 10 #"entero-exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"flotante"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 14 3 12 #"flotante-exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 11 #";;Registros"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"atomorec"
0 0 4 3 1 #" "
0 0 14 3 5 #"campo"
0 0 4 3 1 #" "
0 0 19 3 3 #"\":\""
0 0 4 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"arbno"
0 0 4 3 1 #" "
0 0 14 3 5 #"campo"
0 0 4 3 1 #" "
0 0 19 3 3 #"\":\""
0 0 4 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 22 3 1 #")"
0 0 19 3 3 #"\")\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 14 3 11 #"record-exp1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"atomo"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 14 3 11 #"record-exp2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 19 3 3 #"\"[\""
0 0 4 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"arbno"
0 0 4 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"]\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 14 3 8 #"list-exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 19 3 3 #"\".\""
0 0 4 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 19 3 3 #"\".\""
0 0 4 3 1 #" "
0 0 14 3 5 #"campo"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 14 3 14 #"asg-record-exp"
0 0 22 3 1 #")"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 16 #";;Procedimientos"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 19 3 6 #"\"proc\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 4 3 1 #" "
0 0 14 3 11 #"nombre-proc"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"arbno"
0 0 4 3 1 #" "
0 0 14 3 8 #"variable"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"}\""
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 4 3 1 #" "
0 0 19 3 5 #"\"end\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 14 3 8 #"proc-exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 19 3 5 #"\"fun\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 4 3 1 #" "
0 0 14 3 11 #"nombre-proc"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"arbno"
0 0 4 3 1 #" "
0 0 14 3 8 #"variable"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"}\""
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 4 3 1 #" "
0 0 19 3 5 #"\"end\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 14 3 7 #"fun-exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 4 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 4 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"arbno"
0 0 4 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"}\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 14 3 7 #"app-exp"
0 0 22 3 1 #")"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 15 #";;Condicionales"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 19 3 4 #"\"if\""
0 0 4 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 19 3 6 #"\"then\""
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 4 3 1 #" "
0 0 14 3 3 #"fin"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 14 3 6 #"if-exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 8 #";;Ciclos"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 19 3 5 #"\"for\""
0 0 4 3 1 #" "
0 0 14 3 8 #"variable"
0 0 4 3 1 #" "
0 0 19 3 4 #"\"in\""
0 0 4 3 2 #"  "
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 19 3 4 #"\"..\""
0 0 4 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 19 3 4 #"\"do\""
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 4 3 1 #" "
0 0 19 3 5 #"\"end\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 14 3 7 #"for-exp"
0 0 22 3 1 #")"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 12 #";;Especiales"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 19 3 6 #"\"skip\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 14 3 8 #"skip-exp"
0 0 22 3 1 #")"
0 0 4 3 3 #"   "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 11 #";;Primitiva"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"primitiva"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 22 3 1 #"("
0 0 14 3 5 #"arbno"
0 0 4 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 22 3 1 #")"
0 0 19 3 3 #"\"}\""
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 14 3 8 #"prim-exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 24 #";;Fin para condicionales"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 3 #"fin"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 19 3 6 #"\"else\""
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 4 3 1 #" "
0 0 19 3 5 #"\"end\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 14 3 4 #"else"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 3 #"fin"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 19 3 5 #"\"end\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 14 3 3 #"end"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 22 #";;Campo para registros"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 5 #"campo"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"atomo"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 14 3 7 #"campo-1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 5 #"campo"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"entero"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 14 3 7 #"campo-2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 39 #";Nombre para procedimientos y funciones"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 11 #"nombre-proc"
0 0 22 3 1 #"("
0 0 19 3 3 #"\"$\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 14 3 16 #"nombre-proc-anon"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 11 #"nombre-proc"
0 0 22 3 1 #"("
0 0 14 3 8 #"variable"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 14 3 15 #"nombre-proc-var"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 29 #";;Operaciones sobre variables"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"primitiva"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 19 3 8 #"\"isdet?\""
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 10 #"isdet-prim"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"primitiva"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 19 3 9 #"\"isfree?\""
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 11 #"isfree-prim"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 25 #";;Operaciones Artimeticas"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"primitiva"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 19 3 3 #"\"+\""
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 8 #"sum-prim"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"primitiva"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 19 3 3 #"\"*\""
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 9 #"mult-prim"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"primitiva"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 19 3 3 #"\"-\""
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 8 #"sub-prim"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"primitiva"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 19 3 3 #"\"/\""
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 8 #"div-prim"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 13 #";;Comparacion"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"primitiva"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 19 3 3 #"\"<\""
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 10 #"menor-prim"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"primitiva"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 19 3 4 #"\"=<\""
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 10 #"meneq-prim"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"primitiva"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 19 3 3 #"\">\""
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 10 #"mayor-prim"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"primitiva"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 19 3 4 #"\">=\""
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 10 #"mayig-prim"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"primitiva"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 19 3 4 #"\"==\""
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 10 #"igual-prim"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 9 #";;Logicas"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"primitiva"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 19 3 8 #"\"orelse\""
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 11 #"orelse-prim"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"primitiva"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 19 3 9 #"\"andthen\""
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 12 #"andthen-prim"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 13 #";;Unificacion"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"primitiva"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 19 3 3 #"\"=\""
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 9 #"unif-prim"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 59
#";Tipos de datos para la sintaxis abstracta de la gram\303\241tica"
0 0 4 29 1 #"\n"
0 0 17 3 25 #";Construidos manualmente:"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 37 #";(define-datatype programa programa? "
0 0 4 29 1 #"\n"
0 0 17 3 15 #";   (a-program "
0 0 4 29 1 #"\n"
0 0 17 3 24 #";     (exp expresion?)))"
0 0 4 29 1 #"\n"
0 0 17 3 1 #";"
0 0 4 29 1 #"\n"
0 0 17 3 33 #";(define-datatype cuerpo cuerpo? "
0 0 4 29 1 #"\n"
0 0 17 3 12 #";  (cuerpoc "
0 0 4 29 1 #"\n"
0 0 17 3 22 #";    (exp expresion?) "
0 0 4 29 1 #"\n"
0 0 17 3 34 #";    (exps (list-of expresion?))))"
0 0 4 29 1 #"\n"
0 0 17 3 1 #";"
0 0 4 29 1 #"\n"
0 0 17 3 38 #";(define-datatype expresion expresion?"
0 0 4 29 1 #"\n"
0 0 17 3 12 #";  (var-exp "
0 0 4 29 1 #"\n"
0 0 17 3 17 #";   (id symbol?))"
0 0 4 29 1 #"\n"
0 0 17 3 14 #";  (local-exp "
0 0 4 29 1 #"\n"
0 0 17 3 18 #";   (var symbol?) "
0 0 4 29 1 #"\n"
0 0 17 3 29 #";   (vars (list-of symbol?)) "
0 0 4 29 1 #"\n"
0 0 17 3 21 #";   (cuerpo cuerpo?))"
0 0 4 29 1 #"\n"
0 0 17 3 12 #";  (set-exp "
0 0 4 29 1 #"\n"
0 0 17 3 22 #";   (exp1 expresion?) "
0 0 4 29 1 #"\n"
0 0 17 3 22 #";   (exp2 expresion?))"
0 0 4 29 1 #"\n"
0 0 17 3 15 #";  (entero-exp "
0 0 4 29 1 #"\n"
0 0 17 3 18 #";   (ent string?))"
0 0 4 29 1 #"\n"
0 0 17 3 17 #";  (flotante-exp "
0 0 4 29 1 #"\n"
0 0 17 3 18 #";   (flt string?))"
0 0 4 29 1 #"\n"
0 0 17 3 15 #";  (record-exp1"
0 0 4 29 1 #"\n"
0 0 17 3 19 #";   (label symbol?)"
0 0 4 29 1 #"\n"
0 0 17 3 20 #";   (feature campo?)"
0 0 4 29 1 #"\n"
0 0 17 3 20 #";   (exp expresion?)"
0 0 4 29 1 #"\n"
0 0 17 3 31 #";   (features (list-of campo?))"
0 0 4 29 1 #"\n"
0 0 17 3 32 #";   (exps (list-of expresion?)))"
0 0 4 29 1 #"\n"
0 0 17 3 32 #";  (record-exp2 (label symbol?))"
0 0 4 29 1 #"\n"
0 0 17 3 13 #";  (list-exp "
0 0 4 29 1 #"\n"
0 0 17 3 21 #";   (exp expresion?) "
0 0 4 29 1 #"\n"
0 0 17 3 32 #";   (exps (list-of expresion?)))"
0 0 4 29 1 #"\n"
0 0 17 3 19 #";  (asg-record-exp "
0 0 4 29 1 #"\n"
0 0 17 3 23 #";   (expreg expresion?)"
0 0 4 29 1 #"\n"
0 0 17 3 19 #";   (campo campo?))"
0 0 4 29 1 #"\n"
0 0 17 3 13 #";  (proc-exp "
0 0 4 29 1 #"\n"
0 0 17 3 25 #";   (nombre nombre-proc?)"
0 0 4 29 1 #"\n"
0 0 17 3 29 #";   (vars (list-of symbol?)) "
0 0 4 29 1 #"\n"
0 0 17 3 21 #";   (cuerpo cuerpo?))"
0 0 4 29 1 #"\n"
0 0 17 3 12 #";  (fun-exp "
0 0 4 29 1 #"\n"
0 0 17 3 26 #";   (nombre nombre-proc?) "
0 0 4 29 1 #"\n"
0 0 17 3 29 #";   (vars (list-of symbol?)) "
0 0 4 29 1 #"\n"
0 0 17 3 21 #";   (cuerpo cuerpo?))"
0 0 4 29 1 #"\n"
0 0 17 3 12 #";  (app-exp "
0 0 4 29 1 #"\n"
0 0 17 3 23 #";   (rator expresion?) "
0 0 4 29 1 #"\n"
0 0 17 3 33 #";   (rands (list-of expresion?)))"
0 0 4 29 1 #"\n"
0 0 17 3 11 #";  (if-exp "
0 0 4 29 1 #"\n"
0 0 17 3 26 #";   (cond-exp expresion?) "
0 0 4 29 1 #"\n"
0 0 17 3 22 #";   (true-exp cuerpo?)"
0 0 4 29 1 #"\n"
0 0 17 3 15 #";   (fin fin?))"
0 0 4 29 1 #"\n"
0 0 17 3 12 #";  (for-exp "
0 0 4 29 1 #"\n"
0 0 17 3 18 #";   (var symbol?) "
0 0 4 29 1 #"\n"
0 0 17 3 25 #";   (exp-ini expresion?) "
0 0 4 29 1 #"\n"
0 0 17 3 25 #";   (exp-fin expresion?) "
0 0 4 29 1 #"\n"
0 0 17 3 21 #";   (cuerpo cuerpo?))"
0 0 4 29 1 #"\n"
0 0 17 3 13 #";  (skip-exp)"
0 0 4 29 1 #"\n"
0 0 17 3 13 #";  (prim-exp "
0 0 4 29 1 #"\n"
0 0 17 3 22 #";   (prim primitiva?) "
0 0 4 29 1 #"\n"
0 0 17 3 34 #";   (rands (list-of expresion?))))"
0 0 4 29 1 #"\n"
0 0 17 3 1 #";"
0 0 4 29 1 #"\n"
0 0 17 3 1 #";"
0 0 4 29 1 #"\n"
0 0 17 3 27 #";(define-datatype fin fin? "
0 0 4 29 1 #"\n"
0 0 17 3 9 #";  (else "
0 0 4 29 1 #"\n"
0 0 17 3 19 #";    (cpo cuerpo?))"
0 0 4 29 1 #"\n"
0 0 17 3 9 #";  (end))"
0 0 4 29 1 #"\n"
0 0 17 3 1 #";"
0 0 4 29 1 #"\n"
0 0 17 3 31 #";(define-datatype campo campo? "
0 0 4 29 1 #"\n"
0 0 17 3 12 #";  (campo-1 "
0 0 4 29 1 #"\n"
0 0 17 3 21 #";    (camp1 symbol?))"
0 0 4 29 1 #"\n"
0 0 17 3 12 #";  (campo-2 "
0 0 4 29 1 #"\n"
0 0 17 3 22 #";    (camp2 string?)))"
0 0 4 29 1 #"\n"
0 0 17 3 1 #";"
0 0 4 29 1 #"\n"
0 0 17 3 42 #";(define-datatype nombre-proc nombre-proc?"
0 0 4 29 1 #"\n"
0 0 17 3 21 #";  (nombre-proc-anon)"
0 0 4 29 1 #"\n"
0 0 17 3 20 #";  (nombre-proc-var "
0 0 4 29 1 #"\n"
0 0 17 3 26 #";   (nombre-var symbol?)))"
0 0 4 29 1 #"\n"
0 0 17 3 1 #";"
0 0 4 29 1 #"\n"
0 0 17 3 38 #";(define-datatype primitiva primitiva?"
0 0 4 29 1 #"\n"
0 0 17 3 15 #";  (isdet-prim)"
0 0 4 29 1 #"\n"
0 0 17 3 16 #";  (isfree-prim)"
0 0 4 29 1 #"\n"
0 0 17 3 13 #";  (sum-prim)"
0 0 4 29 1 #"\n"
0 0 17 3 14 #";  (mult-prim)"
0 0 4 29 1 #"\n"
0 0 17 3 13 #";  (sub-prim)"
0 0 4 29 1 #"\n"
0 0 17 3 13 #";  (div-prim)"
0 0 4 29 1 #"\n"
0 0 17 3 15 #";  (menor-prim)"
0 0 4 29 1 #"\n"
0 0 17 3 15 #";  (meneq-prim)"
0 0 4 29 1 #"\n"
0 0 17 3 15 #";  (mayor-prim)"
0 0 4 29 1 #"\n"
0 0 17 3 15 #";  (mayig-prim)"
0 0 4 29 1 #"\n"
0 0 17 3 15 #";  (igual-prim)"
0 0 4 29 1 #"\n"
0 0 17 3 16 #";  (orelse-prim)"
0 0 4 29 1 #"\n"
0 0 17 3 17 #";  (andthen-prim)"
0 0 4 29 1 #"\n"
0 0 17 3 15 #";  (unif-prim))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 30 #";Construidos autom\303\241ticamente:"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 28 #"sllgen:make-define-datatypes"
0 0 4 3 1 #" "
0 0 14 3 31 #"scanner-spec-simple-interpreter"
0 0 4 3 1 #" "
0 0 14 3 26 #"grammar-simple-interpreter"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 18 #"show-the-datatypes"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 28 #"sllgen:list-define-datatypes"
0 0 4 3 1 #" "
0 0 14 3 31 #"scanner-spec-simple-interpreter"
0 0 4 3 1 #" "
0 0 14 3 26 #"grammar-simple-interpreter"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 92
(
 #";*******************************************************************"
 #"************************"
) 0 0 4 29 1 #"\n"
0 0 17 3 26 #";Parser, Scanner, Interfaz"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 76
(
 #";El FrontEnd (An\303\241lisis l\303\251xico (scanner) y sint\303\241"
 #"ctico (parser) integrados)"
) 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 10 #"scan&parse"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 25 #"sllgen:make-string-parser"
0 0 4 3 1 #" "
0 0 14 3 31 #"scanner-spec-simple-interpreter"
0 0 4 3 1 #" "
0 0 14 3 26 #"grammar-simple-interpreter"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 32 #";El Analizador L\303\251xico (Scanner)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 9 #"just-scan"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 26 #"sllgen:make-string-scanner"
0 0 4 3 1 #" "
0 0 14 3 31 #"scanner-spec-simple-interpreter"
0 0 4 3 1 #" "
0 0 14 3 26 #"grammar-simple-interpreter"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 65
(
 #";El Interpretador (FrontEnd + Evaluaci\303\263n + se\303\261al para "
 #"lectura )"
) 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 13 #"interpretador"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 20 #"sllgen:make-rep-loop"
0 0 4 3 2 #"  "
0 0 19 3 6 #"\"--> \""
0 0 4 29 1 #"\n"
0 0 4 3 25 #"                         "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"pgm"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"eval-programa"
0 0 4 3 2 #"  "
0 0 14 3 3 #"pgm"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 25 #"                         "
0 0 22 3 1 #"("
0 0 14 3 25 #"sllgen:make-stream-parser"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 26 #"                          "
0 0 14 3 31 #"scanner-spec-simple-interpreter"
0 0 4 29 1 #"\n"
0 0 4 3 26 #"                          "
0 0 14 3 26 #"grammar-simple-interpreter"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 92
(
 #";*******************************************************************"
 #"************************"
) 0 0 4 29 1 #"\n"
0 0 17 3 14 #";El Interprete"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 50 #";eval-programa: <programa> -> <expresion-evaluada>"
0 0 4 29 1 #"\n"
0 0 17 3 106
(
 #"; funci\303\263n que eval\303\272a un programa teniendo en cuenta un"
 #" ambiente dado (se inicializa dentro del programa)"
) 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 13 #"eval-programa"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"pgm"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 8 #"programa"
0 0 4 3 1 #" "
0 0 14 3 3 #"pgm"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 9 #"a-program"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 15 #"eval-expression"
0 0 4 3 1 #" "
0 0 14 3 3 #"exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"init-env"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 38 #";funci\303\263n que crea el ambiente inicial"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 8 #"init-env"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 10 #"extend-env"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"_"
0 0 4 3 1 #" "
0 0 14 3 1 #"X"
0 0 4 3 1 #" "
0 0 14 3 1 #"Y"
0 0 4 3 1 #" "
0 0 14 3 1 #"M"
0 0 4 3 1 #" "
0 0 14 3 8 #"Variable"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 6 #"vector"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 9 #"empty-env"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 69
(
 #";Varible global para el simbolo que identifica variables no asignada"
 #"s"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"_"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 87
(
 #";eval-cuerpo: <cuerpo> <ambiente> -> numero | booleano | registro | "
 #"procedimiento |null"
) 0 0 4 29 1 #"\n"
0 0 17 3 104
(
 #"; funci\303\263n que eval\303\272a un cuerpo teniendo en cuenta un a"
 #"mbiente dado (se inicializa dentro del programa)"
) 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 11 #"eval-cuerpo"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"crpo"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 4 3 1 #" "
0 0 14 3 4 #"crpo"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 7 #"cuerpoc"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"exp"
0 0 4 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 14 3 4 #"loop"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"eval-expression"
0 0 4 3 1 #" "
0 0 14 3 3 #"exp"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 26 #"                          "
0 0 22 3 1 #"("
0 0 14 3 4 #"exps"
0 0 4 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 2 #"))"
0 0 4 3 12 #"            "
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 22 3 1 #"("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 14 3 9 #"expresion"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 4 #"loop"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"eval-expression"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 26 #"                          "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 8 #"))))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 53 #";eval-nombre-proc: <nombre-proc>  -> <variable> | \"$\""
0 0 4 29 1 #"\n"
0 0 17 3 82
(
 #";funcion que evalua un nombre de programa anonimo o identificado por"
 #" una variable "
) 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 16 #"eval-nombre-proc"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"nom"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 11 #"nombre-proc"
0 0 4 3 1 #" "
0 0 14 3 3 #"nom"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 16 #"nombre-proc-anon"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 19 3 3 #"\"$\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 15 #"nombre-proc-var"
0 0 22 3 1 #"("
0 0 14 3 7 #"nom-var"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 7 #"nom-var"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 41 #";eval-campo:<campo> -> <atomo> | <entero>"
0 0 4 29 1 #"\n"
0 0 17 3 75
(
 #";funcion que evalua campo de un registro que puede ser un atomo o un"
 #" entero"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 10 #"eval-campo"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"camp"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 5 #"campo"
0 0 4 3 1 #" "
0 0 14 3 4 #"camp"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 7 #"campo-1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"camp1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"campo-1"
0 0 4 3 1 #" "
0 0 14 3 5 #"camp1"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 7 #"campo-2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"camp2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"campo-2"
0 0 4 3 1 #" "
0 0 14 3 5 #"camp2"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 113
(
 #";eval-expression: <expresion> <ambiente> -> entero | flotante | bool"
 #"eano | registro | atomo | procedimiento |null"
) 0 0 4 29 1 #"\n"
0 0 17 3 48 #"; evalua la expresi\303\263n en el ambiente de entrada"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 15 #"eval-expression"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"exp"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 14 3 3 #"exp"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 3 1 #" "
0 0 17 3 11 #";;Variables"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 7 #"var-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 11 #"apply-store"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"apply-env"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 17 3 31 #";;Creacion de variables locales"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 9 #"local-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"var"
0 0 4 3 1 #" "
0 0 14 3 4 #"vars"
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 17 #"nuevas-posiciones"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 27 #"almacenar-valores-iniciales"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"("
0 0 14 3 11 #"eval-cuerpo"
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 4 29 1 #"\n"
0 0 4 3 32 #"                                "
0 0 22 3 1 #"("
0 0 14 3 10 #"extend-env"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 14 3 3 #"var"
0 0 4 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"list->vector"
0 0 4 3 1 #" "
0 0 14 3 17 #"nuevas-posiciones"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 17 3 12 #";;Asignacion"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 7 #"set-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"exp1"
0 0 4 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 11 #"unificacion"
0 0 4 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 4 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 17 3 9 #";;Numeros"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 10 #"entero-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"datum"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"number?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"string->number"
0 0 4 3 1 #" "
0 0 14 3 5 #"datum"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 22 3 1 #"("
0 0 14 3 14 #"string->number"
0 0 4 3 1 #" "
0 0 14 3 5 #"datum"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 22 3 1 #"("
0 0 14 3 14 #"string->number"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"substring"
0 0 4 3 1 #" "
0 0 14 3 5 #"datum"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-length"
0 0 4 3 1 #" "
0 0 14 3 5 #"datum"
0 0 22 3 3 #")))"
0 0 20 3 2 #"-1"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 12 #"flotante-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"datum"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"number?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"string->number"
0 0 4 3 1 #" "
0 0 14 3 5 #"datum"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                        "
0 0 22 3 1 #"("
0 0 14 3 14 #"string->number"
0 0 4 3 1 #" "
0 0 14 3 5 #"datum"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                        "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 22 3 1 #"("
0 0 14 3 14 #"string->number"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"substring"
0 0 4 3 1 #" "
0 0 14 3 5 #"datum"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-length"
0 0 4 3 1 #" "
0 0 14 3 5 #"datum"
0 0 22 3 3 #")))"
0 0 20 3 2 #"-1"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 17 3 12 #";;Registros "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 11 #"record-exp1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"label"
0 0 4 3 1 #" "
0 0 14 3 4 #"feat"
0 0 4 3 1 #" "
0 0 14 3 3 #"exp"
0 0 4 3 1 #" "
0 0 14 3 8 #"features"
0 0 4 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 6 #"campos"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 14 3 4 #"feat"
0 0 4 3 1 #" "
0 0 14 3 8 #"features"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 25 #"                         "
0 0 22 3 1 #"("
0 0 14 3 7 #"valores"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 14 3 3 #"exp"
0 0 4 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 3 #")))"
0 0 4 3 25 #"                         "
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 22 3 1 #"("
0 0 14 3 14 #"crear-registro"
0 0 4 3 1 #" "
0 0 14 3 5 #"label"
0 0 4 3 1 #" "
0 0 14 3 6 #"campos"
0 0 4 3 1 #" "
0 0 14 3 7 #"valores"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 17 3 23 #";Registro vacio o atomo"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 11 #"record-exp2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"label"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"atomo-reservado?"
0 0 4 3 1 #" "
0 0 14 3 5 #"label"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                       "
0 0 14 3 5 #"label"
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 12 #"empty-record"
0 0 4 3 1 #" "
0 0 14 3 5 #"label"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 17 3 15 #";listas forma 1"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 8 #"list-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"exp"
0 0 4 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 1 #"("
0 0 14 3 13 #"crear-listas2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 14 3 3 #"exp"
0 0 4 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 17 3 15 #";listas forma 2"
0 0 4 29 1 #"\n"
0 0 17 3 7 #";      "
0 0 17 3 1 #"("
0 0 17 3 8 #"list-exp"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 3 #"exp"
0 0 17 3 1 #" "
0 0 17 3 5 #"exps)"
0 0 4 29 1 #"\n"
0 0 17 3 17 #";                "
0 0 17 3 1 #"("
0 0 17 3 3 #"let"
0 0 17 3 1 #" "
0 0 17 3 2 #"(("
0 0 17 3 5 #"lista"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 4 #"cons"
0 0 17 3 4 #" exp"
0 0 17 3 1 #" "
0 0 17 3 6 #"exps))"
0 0 4 29 1 #"\n"
0 0 17 3 23 #";                      "
0 0 17 3 1 #"("
0 0 17 3 5 #"caml1"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 7 #"campo-1"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 3 #"h))"
0 0 4 29 1 #"\n"
0 0 17 3 23 #";                      "
0 0 17 3 1 #"("
0 0 17 3 5 #"caml2"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 7 #"campo-1"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 3 #"t))"
0 0 4 29 1 #"\n"
0 0 17 3 23 #";                      "
0 0 17 3 1 #"("
0 0 17 3 6 #"atonil"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 11 #"record-exp2"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 6 #"nil)))"
0 0 4 29 1 #"\n"
0 0 17 3 19 #";                  "
0 0 17 3 1 #"("
0 0 17 3 2 #"if"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 6 #"length"
0 0 17 3 1 #" "
0 0 17 3 7 #"lista))"
0 0 4 29 1 #"\n"
0 0 17 3 23 #";                      "
0 0 17 3 1 #"("
0 0 17 3 14 #"crear-registro"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"l"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 5 #"caml1"
0 0 17 3 1 #" "
0 0 17 3 5 #"caml2"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 3 #"car"
0 0 17 3 1 #" "
0 0 17 3 5 #"lista"
0 0 17 3 1 #")"
0 0 17 3 6 #"atonil"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 4 #"env)"
0 0 4 29 1 #"\n"
0 0 17 3 23 #";                      "
0 0 17 3 1 #"("
0 0 17 3 3 #"let"
0 0 17 3 1 #" "
0 0 17 3 2 #"(("
0 0 17 3 5 #"reves"
0 0 17 3 1 #"("
0 0 17 3 7 #"reverse"
0 0 17 3 1 #" "
0 0 17 3 8 #"lista)))"
0 0 4 29 1 #"\n"
0 0 17 3 25 #";                        "
0 0 17 3 1 #"("
0 0 17 3 3 #"let"
0 0 17 3 1 #" "
0 0 17 3 2 #"(("
0 0 17 3 3 #"reg"
0 0 17 3 1 #"("
0 0 17 3 10 #"record-exp"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"l"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 5 #"caml1"
0 0 17 3 1 #" "
0 0 17 3 5 #"caml2"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 6 #"vector"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 3 #"car"
0 0 17 3 1 #" "
0 0 17 3 5 #"reves"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 10 #"atonil))))"
0 0 4 29 1 #"\n"
0 0 17 3 27 #";                          "
0 0 17 3 1 #"("
0 0 17 3 12 #"crear-listas"
0 0 17 3 1 #" "
0 0 17 3 3 #"reg"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 17 3 5 #"reves"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 9 #"env))))))"
0 0 4 29 1 #"\n"
0 0 17 3 22 #";                     "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 17 3 46 #";Acceder a un valor de un campo de un registro"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 14 #"asg-record-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"expreg"
0 0 4 3 1 #" "
0 0 14 3 5 #"campo"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 2 #"  "
0 0 22 3 2 #"(("
0 0 14 3 8 #"registro"
0 0 22 3 1 #"("
0 0 14 3 15 #"eval-expression"
0 0 4 3 1 #" "
0 0 14 3 6 #"expreg"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 29 #"                             "
0 0 22 3 1 #"("
0 0 14 3 5 #"campo"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"eval-campo"
0 0 4 3 1 #" "
0 0 14 3 5 #"campo"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                        "
0 0 22 3 1 #"("
0 0 14 3 19 #"obtener-valor-campo"
0 0 4 3 1 #" "
0 0 14 3 5 #"campo"
0 0 4 3 1 #" "
0 0 14 3 8 #"registro"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 3 3 #"   "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 17 3 15 #";Procedimientos"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 17 3 11 #";;funciones"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 7 #"fun-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"nombre"
0 0 4 3 1 #" "
0 0 14 3 4 #"vars"
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 11 #"nombre-proc"
0 0 4 3 1 #" "
0 0 14 3 6 #"nombre"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 16 #"nombre-proc-anon"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 29 1 #"\n"
0 0 4 3 35 #"                                   "
0 0 22 3 1 #"("
0 0 14 3 7 #"funcion"
0 0 4 3 1 #" "
0 0 14 3 6 #"nombre"
0 0 4 3 1 #" "
0 0 14 3 4 #"vars"
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 17 3 77
(
 #";;Si el proc y fun es anonimo se comporta igual que el proc hecho en"
 #" el curso"
) 0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 15 #"nombre-proc-var"
0 0 22 3 1 #"("
0 0 14 3 10 #"nombre-var"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 33 #"                                 "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 3 #"pos"
0 0 22 3 1 #"("
0 0 14 3 9 #"apply-env"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"eval-nombre-proc"
0 0 4 3 1 #" "
0 0 14 3 6 #"nombre"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 17 3 140
(
 #";;Si el procedimiento es identificado, se debe buscar la pos en el s"
 #"tore de la variable que identifica ese proc para almacenarlo en el s"
 #"tore"
) 0 0 4 29 1 #"\n"
0 0 4 3 39 #"                                       "
0 0 22 3 1 #"("
0 0 14 3 7 #"funcion"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"funcion"
0 0 4 3 1 #" "
0 0 14 3 6 #"nombre"
0 0 4 3 1 #" "
0 0 14 3 4 #"vars"
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 35 #"                                   "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 37 #"                                     "
0 0 22 3 1 #"("
0 0 14 3 9 #"set-store"
0 0 4 3 1 #" "
0 0 14 3 3 #"pos"
0 0 4 3 1 #" "
0 0 14 3 7 #"funcion"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 37 #"                                     "
0 0 14 3 7 #"funcion"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 17 3 16 #";;procedimientos"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 8 #"proc-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"nombre"
0 0 4 3 1 #" "
0 0 14 3 4 #"vars"
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 22 3 1 #")"
0 0 4 3 2 #"  "
0 0 4 3 16 #"                "
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 11 #"nombre-proc"
0 0 4 3 1 #" "
0 0 14 3 6 #"nombre"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 16 #"nombre-proc-anon"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 29 1 #"\n"
0 0 4 3 36 #"                                    "
0 0 22 3 1 #"("
0 0 14 3 7 #"closure"
0 0 4 3 1 #" "
0 0 14 3 6 #"nombre"
0 0 4 3 1 #" "
0 0 14 3 4 #"vars"
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 15 #"nombre-proc-var"
0 0 22 3 1 #"("
0 0 14 3 10 #"nombre-var"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 34 #"                                  "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 3 #"pos"
0 0 22 3 1 #"("
0 0 14 3 9 #"apply-env"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"eval-nombre-proc"
0 0 4 3 1 #" "
0 0 14 3 6 #"nombre"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 40 #"                                        "
0 0 22 3 1 #"("
0 0 14 3 7 #"closure"
0 0 22 3 1 #"("
0 0 14 3 7 #"closure"
0 0 4 3 1 #" "
0 0 14 3 6 #"nombre"
0 0 4 3 1 #" "
0 0 14 3 4 #"vars"
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 36 #"                                    "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                      "
0 0 22 3 1 #"("
0 0 14 3 9 #"set-store"
0 0 4 3 1 #" "
0 0 14 3 3 #"pos"
0 0 4 3 1 #" "
0 0 14 3 7 #"closure"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                      "
0 0 14 3 7 #"closure"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 17 3 30 #";;aplicacion de procedimientos"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 7 #"app-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"rator"
0 0 4 3 1 #" "
0 0 14 3 5 #"rands"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 17 3 69
(
 #";; se debe usar unificacion para actualizar el valor de las variable"
 #"s"
) 0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 4 #"proc"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"eval-expression"
0 0 4 3 1 #" "
0 0 14 3 5 #"rator"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 22 3 1 #"("
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"eval-rands"
0 0 4 3 1 #" "
0 0 14 3 5 #"rands"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 4 3 38 #"                                      "
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"procval?"
0 0 4 3 1 #" "
0 0 14 3 4 #"proc"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 22 3 1 #"("
0 0 14 3 15 #"apply-procedure"
0 0 4 3 1 #" "
0 0 14 3 4 #"proc"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 15 #"eval-expression"
0 0 4 29 1 #"\n"
0 0 4 3 33 #"                                 "
0 0 19 3 35 #"\"Attempt to apply non-procedure ~s\""
0 0 4 3 1 #" "
0 0 14 3 4 #"proc"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 17 3 15 #";;Condicionales"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 6 #"if-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"cond-exp"
0 0 4 3 1 #" "
0 0 14 3 10 #"true-curpo"
0 0 4 3 1 #" "
0 0 14 3 7 #"fin-exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 2 #"(("
0 0 14 3 11 #"true-value?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"eval-expression"
0 0 4 3 1 #" "
0 0 14 3 8 #"cond-exp"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 11 #"eval-cuerpo"
0 0 4 3 1 #" "
0 0 14 3 10 #"true-curpo"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 2 #"(("
0 0 14 3 12 #"false-value?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"eval-expression"
0 0 4 3 1 #" "
0 0 14 3 8 #"cond-exp"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 3 #"fin"
0 0 4 3 1 #" "
0 0 14 3 7 #"fin-exp"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"cuerpo"
0 0 22 3 2 #")("
0 0 14 3 11 #"eval-cuerpo"
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"("
0 0 14 3 3 #"end"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"void"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"if-exp"
0 0 4 3 1 #" "
0 0 19 3 43 #"\"La condici\303\263n no es de tipo booelano: ~s.\""
0 0 4 3 1 #" "
0 0 14 3 8 #"cond-exp"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 17 3 8 #";;Ciclos"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 7 #"for-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"var"
0 0 4 3 1 #" "
0 0 14 3 7 #"exp-ini"
0 0 4 3 1 #" "
0 0 14 3 7 #"exp-fin"
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 3 #"ini"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"eval-expression"
0 0 4 3 1 #" "
0 0 14 3 7 #"exp-ini"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 22 3 1 #"("
0 0 14 3 3 #"fin"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"eval-expression"
0 0 4 3 1 #" "
0 0 14 3 7 #"exp-fin"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"number?"
0 0 4 3 1 #" "
0 0 14 3 3 #"ini"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"number?"
0 0 4 3 1 #" "
0 0 14 3 3 #"fin"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"<="
0 0 4 3 1 #" "
0 0 14 3 3 #"ini"
0 0 4 3 1 #" "
0 0 14 3 3 #"fin"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 22 3 1 #"("
0 0 14 3 6 #"do-for"
0 0 4 3 1 #" "
0 0 14 3 3 #"var"
0 0 4 3 1 #" "
0 0 14 3 3 #"ini"
0 0 4 3 1 #" "
0 0 14 3 3 #"fin"
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"for-exp"
0 0 4 3 1 #" "
0 0 19 3 45
#"\"Los l\303\254mites del for son inv\303\241lidos: ~s ~s.\""
0 0 4 3 1 #" "
0 0 14 3 7 #"exp-ini"
0 0 4 3 1 #" "
0 0 14 3 7 #"exp-fin"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 17 3 12 #";;Especiales"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 8 #"skip-exp"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 4 #"void"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 8 #"prim-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"prim"
0 0 4 3 1 #" "
0 0 14 3 5 #"rands"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"eval-rands"
0 0 4 3 1 #" "
0 0 14 3 5 #"rands"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 15 #"apply-primitive"
0 0 4 3 1 #" "
0 0 14 3 4 #"prim"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 14 3 5 #"rands"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 109
(
 #";;;;funciones auxiliares para aplicar eval-expression a cada element"
 #"o de una lista de operandos (expresiones)"
) 0 0 4 29 1 #"\n"
0 0 17 3 57 #";eval-rands:  <list-of-expresion> <ambiente> -> <funcion>"
0 0 4 29 1 #"\n"
0 0 17 3 65
#";evalua los operandos a los que se les va a aplicar una primitiva"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 10 #"eval-rands"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"rands"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"eval-rand"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 5 #"rands"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 67
#";eval-rands: <expresion> <ambiente> -> entero | flotante | registro"
0 0 4 29 1 #"\n"
0 0 17 3 65
#";evalua los operandos a los que se les va a aplicar una primitiva"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 9 #"eval-rand"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rand"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 15 #"eval-expression"
0 0 4 3 1 #" "
0 0 14 3 4 #"rand"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 17 3 5 #";;;;;"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 69
(
 #";almacenar-valores-iniciales: <list-of-symbols> -> <list-of-integers"
 #">"
) 0 0 4 29 1 #"\n"
0 0 17 3 83
(
 #";utiliza la funci\303\263n extend-store-varios y crear-lista-no-asig"
 #"nados, para reservar "
) 0 0 4 29 1 #"\n"
0 0 17 3 79
(
 #";posiciones para una cantidad de varibales no asignadas. Devuelve un"
 #"a lista con"
) 0 0 4 29 1 #"\n"
0 0 17 3 40 #";la lista con las posiciones reservadas."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 27 #"almacenar-valores-iniciales"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"cantidad"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 19 #"extend-store-varios"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"list->vector"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 24 #"crear-lista-no-asignados"
0 0 4 3 1 #" "
0 0 14 3 8 #"cantidad"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 46 #";crear-lista-no-asignados: <integer> -> <list>"
0 0 4 29 1 #"\n"
0 0 17 3 92
(
 #";crea una lista de tama\303\261o cantidad que contiene solo var-no-a"
 #"sig (que inidcan no asignado)."
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 24 #"crear-lista-no-asignados"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"cantidad"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 14 3 4 #"loop"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 4 #"next"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #">="
0 0 4 3 1 #" "
0 0 14 3 4 #"next"
0 0 4 3 1 #" "
0 0 14 3 8 #"cantidad"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 2 #"()"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"loop"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 14 3 4 #"next"
0 0 22 3 7 #")))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 41 #";true-value?: <scheme-value> -> <boolean>"
0 0 4 29 1 #"\n"
0 0 17 3 47 #";Determinar si un valor es igual al atomo 'true"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 11 #"true-value?"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"val"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 3 #"val"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"true"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 41 #";true-false?: <scheme-value> -> <boolean>"
0 0 4 29 1 #"\n"
0 0 17 3 48 #";Determinar si un valor es igual al atomo 'false"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 12 #"false-value?"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"val"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 3 #"val"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"false"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 70
(
 #";do-for: <symbol> <integer> <integer> <cuerpo> <environment> -> <voi"
 #"d>"
) 0 0 4 29 1 #"\n"
0 0 17 3 76
(
 #";Permite ejcutar el cuerpo de un for, para esto crea la variable del"
 #" for, en"
) 0 0 4 29 1 #"\n"
0 0 17 3 40 #"; en cada iteraci\303\263n y evl\303\272a el cuerpo."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 6 #"do-for"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"var"
0 0 4 3 1 #" "
0 0 14 3 3 #"ini"
0 0 4 3 1 #" "
0 0 14 3 3 #"fin"
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 9 #"nuevo-env"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"extend-env"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 14 3 3 #"var"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 3 #"())"
0 0 4 29 1 #"\n"
0 0 4 3 33 #"                                 "
0 0 22 3 1 #"("
0 0 14 3 12 #"list->vector"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"store-size"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 4 #"()))"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 12 #"extend-store"
0 0 4 3 1 #" "
0 0 14 3 3 #"ini"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 2 #"(("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 14 3 3 #"ini"
0 0 4 3 1 #" "
0 0 14 3 3 #"fin"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 11 #"eval-cuerpo"
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 4 3 1 #" "
0 0 14 3 9 #"nuevo-env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 6 #"do-for"
0 0 4 3 1 #" "
0 0 14 3 3 #"var"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 3 #"ini"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"fin"
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 4 3 1 #" "
0 0 14 3 9 #"nuevo-env"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 2 #"(("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 14 3 3 #"ini"
0 0 4 3 1 #" "
0 0 14 3 3 #"fin"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 11 #"eval-cuerpo"
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 4 3 1 #" "
0 0 14 3 9 #"nuevo-env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 4 #"void"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 6 #"))))))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 47 #";atomo-reservado?: <scheme-value> -> <booleano>"
0 0 4 29 1 #"\n"
0 0 17 3 41 #";Determina si un atomo es reservado o no."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 16 #"atomo-reservado?"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"val"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 2 #"or"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 3 #"val"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"true"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 3 #"val"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"false"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 3 #"val"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"nil"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 107
(
 #";apply-primitive: <primitiva> <list-of-expression> <ambiente> -> ent"
 #"ero | flotante | booleano |atomo | null"
) 0 0 4 29 1 #"\n"
0 0 17 3 57 #";aplica primitivas a una expresion o lista de expresiones"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 15 #"apply-primitive"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"prim"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 14 3 5 #"rands"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 17 3 26 #";rands es para unificacion"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 9 #"primitiva"
0 0 4 3 1 #" "
0 0 14 3 4 #"prim"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 17 3 36 #";;Operaciones sobre variables       "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 10 #"isdet-prim"
0 0 4 3 1 #" "
0 0 22 3 3 #"()("
0 0 14 3 16 #"apply-isdet-prim"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 11 #"isfree-prim"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"apply-isfree-prim"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 17 3 25 #";;Operaciones Aritmeticas"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 8 #"sum-prim"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"apply-multi-prim"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 8 #"integer?"
0 0 4 3 1 #" "
0 0 14 3 8 #"inexact?"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 9 #"mult-prim"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"apply-multi-prim"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 8 #"integer?"
0 0 4 3 1 #" "
0 0 14 3 8 #"inexact?"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 8 #"sub-prim"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"apply-doble-prim"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 8 #"integer?"
0 0 4 3 1 #" "
0 0 14 3 8 #"inexact?"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 8 #"div-prim"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"apply-doble-prim"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 14 3 1 #"/"
0 0 4 3 1 #" "
0 0 14 3 8 #"integer?"
0 0 4 3 1 #" "
0 0 14 3 8 #"inexact?"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 17 3 20 #";;Comparacion       "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 17 3 47 #";usamos los atomos como Strings de scheme      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 10 #"menor-prim"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 21 #"apply-multi-type-prim"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 14 3 8 #"string<?"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 10 #"meneq-prim"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 21 #"apply-multi-type-prim"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 14 3 2 #"<="
0 0 4 3 1 #" "
0 0 14 3 9 #"string<=?"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 10 #"mayor-prim"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 21 #"apply-multi-type-prim"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 14 3 1 #">"
0 0 4 3 1 #" "
0 0 14 3 8 #"string>?"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 10 #"mayig-prim"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 21 #"apply-multi-type-prim"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 14 3 2 #">="
0 0 4 3 1 #" "
0 0 14 3 9 #"string>=?"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 10 #"igual-prim"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 21 #"apply-multi-type-prim"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 14 3 8 #"string=?"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 17 3 14 #";;Logicas     "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 11 #"orelse-prim"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 26 #"                          "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 22 3 1 #"("
0 0 14 3 8 #"boolean?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"atomo-booleano"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 4 #")))("
0 0 14 3 8 #"boolean?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"atomo-booleano"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 30 #"                              "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"or"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"atomo-booleano"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"atomo-booleano"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 34 #"                                  "
0 0 20 3 1 #"'"
0 0 14 3 4 #"true"
0 0 4 29 1 #"\n"
0 0 4 3 34 #"                                  "
0 0 20 3 1 #"'"
0 0 14 3 5 #"false"
0 0 22 3 1 #")"
0 0 4 3 30 #"                              "
0 0 4 29 1 #"\n"
0 0 4 3 30 #"                              "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 15 #"apply-primitive"
0 0 4 3 1 #" "
0 0 19 3 38 #"\"~s, Debe ingresar valores booleanos.\""
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 26 #"                          "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 15 #"apply-primitive"
0 0 4 3 1 #" "
0 0 19 3 31 #"\"~s, Debe ingresar 2 entradas.\""
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 12 #"andthen-prim"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 27 #"                           "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 22 3 1 #"("
0 0 14 3 8 #"boolean?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"atomo-booleano"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 4 #")))("
0 0 14 3 8 #"boolean?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"atomo-booleano"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 31 #"                               "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"atomo-booleano"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 3 #"))("
0 0 14 3 14 #"atomo-booleano"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 35 #"                                   "
0 0 20 3 1 #"'"
0 0 14 3 4 #"true"
0 0 4 29 1 #"\n"
0 0 4 3 35 #"                                   "
0 0 20 3 1 #"'"
0 0 14 3 5 #"false"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 31 #"                               "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 15 #"apply-primitive"
0 0 4 3 1 #" "
0 0 19 3 38 #"\"~s, Debe ingresar valores booleanos.\""
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 27 #"                           "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 15 #"apply-primitive"
0 0 4 3 1 #" "
0 0 19 3 31 #"\"~s, Debe ingresar 2 entradas.\""
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 17 3 13 #";;Unificacion"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 9 #"unif-prim"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 28 #"apply-doble-prim-unificacion"
0 0 4 3 1 #" "
0 0 14 3 5 #"rands"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 57 #";;;;funciones auxiliares para la aplicacion de primitivas"
0 0 4 29 1 #"\n"
0 0 17 3 87
(
 #";apply-multi-prim:  <list-of expression?> <primitiva> <predicado-de-"
 #"tipo-dato>-> numero"
) 0 0 4 29 1 #"\n"
0 0 17 3 105
(
 #";funci\303\263n auxiliar la cual evalua el caso en el que una primit"
 #"iva se deba aplicar a dos o m\303\241s argumentos"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 16 #"apply-multi-prim"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 14 3 3 #"pri"
0 0 4 3 1 #" "
0 0 14 3 6 #"tipo1?"
0 0 4 3 1 #" "
0 0 14 3 6 #"tipo2?"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"or"
0 0 22 3 1 #"("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 16 #"apply-multi-prim"
0 0 4 3 1 #" "
0 0 19 3 37 #"\"Debe ingresar 2 o m\303\241s entradas ~s.\""
0 0 4 3 1 #" "
0 0 14 3 3 #"pri"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 20 #"apply-multi-prim-aux"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 14 3 3 #"pri"
0 0 4 3 1 #" "
0 0 14 3 6 #"tipo1?"
0 0 4 3 1 #" "
0 0 14 3 6 #"tipo2?"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 92
(
 #";apply-multi-prim-aux:  <list-of expression?> <primitiva> <predicado"
 #"-de-tipo-dato> -> numero"
) 0 0 4 29 1 #"\n"
0 0 17 3 146
(
 #";funci\303\263n auxiliar que calcula la operacion de la primitiva so"
 #"bre los argumentos despues de haber evaluado su tama\303\261o correc"
 #"to en apply-multi-prim"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 20 #"apply-multi-prim-aux"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 14 3 3 #"pri"
0 0 4 3 1 #" "
0 0 14 3 6 #"tipo1?"
0 0 4 3 1 #" "
0 0 14 3 6 #"tipo2?"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"or"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"apply-multi-prim-aux-tipo"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 14 3 3 #"pri"
0 0 4 3 1 #" "
0 0 14 3 6 #"tipo1?"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"apply-multi-prim-aux-tipo"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 14 3 3 #"pri"
0 0 4 3 1 #" "
0 0 14 3 6 #"tipo2?"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 3 #"pri"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 20 #"apply-multi-prim-aux"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"pri"
0 0 4 3 1 #" "
0 0 14 3 6 #"tipo1?"
0 0 4 3 1 #" "
0 0 14 3 6 #"tipo2?"
0 0 22 3 2 #"))"
0 0 4 3 12 #"            "
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 20 #"apply-multi-prim-aux"
0 0 4 3 1 #" "
0 0 19 3 77
(
 #"\"Las entradas no son numeros \303\263 un flotante y un entero no se"
 #" pueden operar.\""
) 0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 101
(
 #";apply-multi-prim-aux-tipo:  <list-of expression?> <primitiva> <pred"
 #"icado-de-tipo-dato> -> <booleano>"
) 0 0 4 29 1 #"\n"
0 0 17 3 93
(
 #";funci\303\263n auxiliar que verifica que un numero flotante y un nu"
 #"emro entero no se puedan operar"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 25 #"apply-multi-prim-aux-tipo"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 14 3 3 #"pri"
0 0 4 3 1 #" "
0 0 14 3 5 #"tipo?"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 5 #"tipo?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"tipo?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 25 #"apply-multi-prim-aux-tipo"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"pri"
0 0 4 3 1 #" "
0 0 14 3 5 #"tipo?"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 20 #"apply-multi-prim-aux"
0 0 4 3 1 #" "
0 0 19 3 77
(
 #"\"Las entradas no son numeros \303\263 un flotante y un entero no se"
 #" pueden operar.\""
) 0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 90
(
 #";apply-doble-prim:  <list-of expression?> <primitiva>  <predicado-de"
 #"-tipo-dato> -> numero "
) 0 0 4 29 1 #"\n"
0 0 17 3 60
#";funci\303\263n auxiliar que aplica una primitiva a dos argumentos"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 16 #"apply-doble-prim"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 14 3 3 #"pri"
0 0 4 3 1 #" "
0 0 14 3 6 #"tipo1?"
0 0 4 3 1 #" "
0 0 14 3 6 #"tipo2?"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"or"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"tipo1?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"tipo1?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"tipo2?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"tipo2?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 3 #"pri"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 16 #"apply-doble-prim"
0 0 4 3 1 #" "
0 0 19 3 77
(
 #"\"Las entradas no son numeros \303\263 una entrada es entero y la ot"
 #"ra es flotante.\""
) 0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 16 #"apply-doble-prim"
0 0 4 3 1 #" "
0 0 19 3 31 #"\"~s, Debe ingresar 2 entradas.\""
0 0 4 3 1 #" "
0 0 14 3 3 #"pri"
0 0 22 3 4 #"))))"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 72
(
 #";apply-doble-prim-unificacion:  <list-of expression?> <ambiente> -> "
 #"null"
) 0 0 4 29 1 #"\n"
0 0 17 3 60
#";funci\303\263n auxiliar que aplica una unificacion a dos terminos"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 28 #"apply-doble-prim-unificacion"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 11 #"unificacion"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 28 #"apply-doble-prim-unificacion"
0 0 4 3 1 #" "
0 0 19 3 36 #"\"~s, Debe ingresar solo 2 entradas.\""
0 0 22 3 4 #"))))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 70
(
 #";apply-variable-isdet-prim:  <list-of expression?> <ambiente> -> ato"
 #"mo"
) 0 0 4 29 1 #"\n"
0 0 17 3 81
(
 #";funci\303\263n auxiliar que verifica que la primitiva isdet? solo r"
 #"eciba un argumento "
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 16 #"apply-isdet-prim"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 3 8 #"        "
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 20 #"apply-isdet-prim-aux"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 3 8 #"        "
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 16 #"apply-isdet-prim"
0 0 4 3 1 #" "
0 0 19 3 35 #"\"~s, Debe ingresar solo 1 entrada.\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 74
(
 #";apply-variable-isdet-prim-aux:  <list-of expression?> <ambiente> ->"
 #" atomo"
) 0 0 4 29 1 #"\n"
0 0 17 3 68
(
 #";funci\303\263n auxiliar que aplica la primitiva isdet? sobre una va"
 #"riable"
) 0 0 4 29 1 #"\n"
0 0 17 3 77
(
 #";isdet? retorna true si la variable esta asignada a algun valor y fa"
 #"lse si no"
) 0 0 4 29 1 #"\n"
0 0 17 3 133
(
 #";como el args llega evaluado, entonces si es una variable llega el v"
 #"alor de la variable en el store, y si es diferente a una variable"
) 0 0 4 29 1 #"\n"
0 0 17 3 61
#";se toma como un valor, es decir algo no libre o ya asignado."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 20 #"apply-isdet-prim-aux"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 20 3 1 #"'"
0 0 14 3 5 #"false"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 20 3 1 #"'"
0 0 14 3 4 #"true"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 71
(
 #";apply-variable-isfree-prim:  <list-of expression?> <ambiente> -> at"
 #"omo"
) 0 0 4 29 1 #"\n"
0 0 17 3 82
(
 #";funci\303\263n auxiliar que verifica que la primitiva isfree? solo "
 #"reciba un argumento "
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 17 #"apply-isfree-prim"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 3 10 #"          "
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 21 #"apply-isfree-prim-aux"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 3 8 #"        "
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 17 #"apply-isfree-prim"
0 0 4 3 1 #" "
0 0 19 3 35 #"\"~s, Debe ingresar solo 1 entrada.\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 75
(
 #";apply-variable-isfree-prim-aux:  <list-of expression?> <ambiente> -"
 #"> atomo"
) 0 0 4 29 1 #"\n"
0 0 17 3 70
(
 #";funci\303\263n auxiliar que aplica la primitiva isfree? sobre una v"
 #"ariable "
) 0 0 4 29 1 #"\n"
0 0 17 3 133
(
 #";como el args llega evaluado, entonces si es una variable llega el v"
 #"alor de la variable en el store, y si es diferente a una variable"
) 0 0 4 29 1 #"\n"
0 0 17 3 61
#";se toma como un valor, es decir algo no libre o ya asignado."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 21 #"apply-isfree-prim-aux"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 20 3 1 #"'"
0 0 14 3 4 #"true"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 20 3 1 #"'"
0 0 14 3 5 #"false"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 44 #";number-string-symbol?: <valor> -> <boolean>"
0 0 4 29 1 #"\n"
0 0 17 3 77
(
 #";Retorna true si el valor ingresado es un numero, string o simbolo d"
 #"e scheme."
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 21 #"number-string-symbol?"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"val"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 2 #"or"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"number?"
0 0 4 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"string?"
0 0 4 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"symbol?"
0 0 4 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 79
(
 #";apply-multi-type-prim:  <list-of expression?> <primitiva> <predicad"
 #"o>->  atomo"
) 0 0 4 29 1 #"\n"
0 0 17 3 86
(
 #";funci\303\263n auxiliar que aplica una primitiva a dos argumentos, "
 #"que pueden ser numeros, "
) 0 0 4 29 1 #"\n"
0 0 17 3 30 #";simbolos o strings de scheme."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 21 #"apply-multi-type-prim"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 14 3 10 #"pri-number"
0 0 4 3 1 #" "
0 0 14 3 10 #"pri-string"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 2 #"(("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"number?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"number?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"eqv?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"pri-number"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 20 3 1 #"'"
0 0 14 3 4 #"true"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 20 3 1 #"'"
0 0 14 3 5 #"false"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 2 #"(("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"symbol?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"symbol?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"eqv?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"pri-string"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 20 3 1 #"'"
0 0 14 3 4 #"true"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 20 3 1 #"'"
0 0 14 3 5 #"false"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 21 #"apply-multi-type-prim"
0 0 4 3 1 #" "
0 0 19 3 55 #"\"Las entradas (o una de ellas) son de tipo incorrecto.\""
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 21 #"apply-multi-type-prim"
0 0 4 3 1 #" "
0 0 19 3 27 #"\"Debe ingresar 2 entradas.\""
0 0 4 3 1 #" "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 42 #";;;Funcion aplicacion de primitivas or and"
0 0 4 29 1 #"\n"
0 0 17 3 37 #";atomo-booleano:  <atomo> -> booleano"
0 0 4 29 1 #"\n"
0 0 17 3 103
(
 #";atomo-booleano: funci\303\263n auxiliar que evalua los atomos true "
 #"y false y devulve #t y #f respectivamente"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 14 #"atomo-booleano"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"val"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 3 #"val"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"true"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 20 3 2 #"#t"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 20 3 2 #"#f"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 92
(
 #";*******************************************************************"
 #"************************"
) 0 0 4 29 1 #"\n"
0 0 17 3 10 #";Variables"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 40 #";definici\303\263n del tipo de dato variable  "
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 4 3 1 #" "
0 0 14 3 8 #"variable"
0 0 4 3 1 #" "
0 0 14 3 9 #"variable?"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 5 #"a-var"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"posicion"
0 0 4 3 1 #" "
0 0 14 3 13 #"scheme-value?"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";crear-variable: <scheme-value> <ambiente> -> <variable>"
0 0 4 29 1 #"\n"
0 0 17 3 73
(
 #";Crea una variable (estructura) en el store a partir de una posicion"
 #" dada"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 14 #"crear-variable"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"posicion"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 3 #"var"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"a-var"
0 0 4 3 1 #" "
0 0 14 3 8 #"posicion"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 12 #"extend-store"
0 0 4 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 14 3 3 #"var"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 92
(
 #";*******************************************************************"
 #"************************"
) 0 0 4 29 1 #"\n"
0 0 17 3 10 #";Ambientes"
0 0 4 29 1 #"\n"
0 0 17 3 38 #";definici\303\263n del tipo de dato ambiente"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 4 3 1 #" "
0 0 14 3 11 #"environment"
0 0 4 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 16 #"empty-env-record"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 19 #"extended-env-record"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"syms"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"list-of"
0 0 4 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 10 #"posiciones"
0 0 4 3 1 #" "
0 0 14 3 7 #"vector?"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 41 #";scheme-value?: <scheme-value> -> boolean"
0 0 4 29 1 #"\n"
0 0 17 3 47 #"; Determina si la entrada es un valor de scheme"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 13 #"scheme-value?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"v"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 32 #";empty-env:   null -> <ambiente>"
0 0 4 29 1 #"\n"
0 0 17 3 37 #";funci\303\263n que crea un ambiente vac\303\255o"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 9 #"empty-env"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 16 #"empty-env-record"
0 0 22 3 3 #")))"
0 0 17 3 43 #";llamado al constructor de ambiente vac\303\255o "
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 64
#";extend-env: <list-of-symbols> <vector> <ambiente> -> <ambiente>"
0 0 4 29 1 #"\n"
0 0 17 3 41 #"; funci\303\263n que crea un ambiente extendido"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 10 #"extend-env"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"syms"
0 0 4 3 1 #" "
0 0 14 3 10 #"posiciones"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 19 #"extended-env-record"
0 0 4 3 1 #" "
0 0 14 3 4 #"syms"
0 0 4 3 1 #" "
0 0 14 3 10 #"posiciones"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 44 #";apply-env: <ambiente> <symbol> -> <integer>"
0 0 4 29 1 #"\n"
0 0 17 3 73
(
 #";funci\303\263n que busca un s\303\255mbolo en un ambiente, devuelve"
 #" la posici\303\263n en "
) 0 0 4 29 1 #"\n"
0 0 17 3 34 #";el store asignada a ese s\303\255mbolo."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 9 #"apply-env"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 14 3 3 #"sym"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 11 #"environment"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 16 #"empty-env-record"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                        "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"apply-env"
0 0 4 3 1 #" "
0 0 19 3 20 #"\"No binding for: ~s\""
0 0 4 3 1 #" "
0 0 14 3 3 #"sym"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 19 #"extended-env-record"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"syms"
0 0 4 3 1 #" "
0 0 14 3 10 #"posiciones"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 27 #"                           "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 3 #"pos"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"list-find-position"
0 0 4 3 1 #" "
0 0 14 3 3 #"sym"
0 0 4 3 1 #" "
0 0 14 3 4 #"syms"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 29 #"                             "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"number?"
0 0 4 3 1 #" "
0 0 14 3 3 #"pos"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 33 #"                                 "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 10 #"posiciones"
0 0 4 3 1 #" "
0 0 14 3 3 #"pos"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 33 #"                                 "
0 0 22 3 1 #"("
0 0 14 3 9 #"apply-env"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 14 3 3 #"sym"
0 0 22 3 7 #")))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 92
(
 #";*******************************************************************"
 #"************************"
) 0 0 4 29 1 #"\n"
0 0 17 3 6 #";Store"
0 0 4 29 1 #"\n"
0 0 17 3 35 #";definici\303\263n del tipo de dato store"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 4 3 1 #" "
0 0 14 3 5 #"store"
0 0 4 3 1 #" "
0 0 14 3 6 #"store?"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 7 #"a-store"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 8 #"vec-vals"
0 0 4 3 1 #" "
0 0 14 3 7 #"vector?"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 19 #";Creaci\303\263n de Store"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 10 #"str-global"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"a-store"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 6 #"vector"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"a-var"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"a-var"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 43 #";<valor>: es una valor expresado o denotado"
0 0 4 29 1 #"\n"
0 0 17 3 45 #";extend-store: <valor> -> <store-actualizado>"
0 0 4 29 1 #"\n"
0 0 17 3 72
(
 #";funci\303\263n que crea un store extendido, agrega un nuevo element"
 #"o al store"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 12 #"extend-store"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"val"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 5 #"store"
0 0 4 3 1 #" "
0 0 14 3 10 #"str-global"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 7 #"a-store"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"vec-vals"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 10 #"str-global"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"a-store"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-append"
0 0 4 3 1 #" "
0 0 14 3 8 #"vec-vals"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"vector"
0 0 4 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 20 3 1 #"1"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 34 #";apply-store: <integer> -> <valor>"
0 0 4 29 1 #"\n"
0 0 17 3 69
(
 #";funci\303\263n que devuelve el val"
 #"or almacenado en una posici\303\263n del store"
) 0 0 4 29 1 #"\n"
0 0 17 3 115
(
 #";buscandolo por todo el store en caso de que la pos de la variable d"
 #"el ambiente apunte a un (a-var pos) en el store"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 11 #"apply-store"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"pos"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 5 #"store"
0 0 4 3 1 #" "
0 0 14 3 10 #"str-global"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 7 #"a-store"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"vec-vals"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 3 #"val"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 8 #"vec-vals"
0 0 4 3 1 #" "
0 0 14 3 3 #"pos"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"variable?"
0 0 4 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 8 #"variable"
0 0 4 3 1 #" "
0 0 14 3 3 #"val"
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 5 #"a-var"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"posicion"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 30 #"                              "
0 0 22 3 1 #"("
0 0 14 3 11 #"apply-store"
0 0 4 3 1 #" "
0 0 14 3 8 #"posicion"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 14 3 3 #"val"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 48 #";apply-store-valor-directo: <integer> -> <valor>"
0 0 4 29 1 #"\n"
0 0 17 3 131
(
 #";funci\303\263n que devuelve el valor directo en el store de una var"
 #"iable del ambiente. Este valor puede ser: (a-var pos) o una expresio"
 #"n"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 25 #"apply-store-valor-directo"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"pos"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 5 #"store"
0 0 4 3 1 #" "
0 0 14 3 10 #"str-global"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 7 #"a-store"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"vec-vals"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 3 #"val"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 8 #"vec-vals"
0 0 4 3 1 #" "
0 0 14 3 3 #"pos"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 14 3 3 #"val"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 39 #";set-store: <symbol> <valor> -> <valor>"
0 0 4 29 1 #"\n"
0 0 17 3 43 #";funci\303\263n que modifica un valor en un store"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 9 #"set-store"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"pos"
0 0 4 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 5 #"store"
0 0 4 3 1 #" "
0 0 14 3 10 #"str-global"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 7 #"a-store"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"vec-vals"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-set!"
0 0 4 3 1 #" "
0 0 14 3 8 #"vec-vals"
0 0 4 3 1 #" "
0 0 14 3 3 #"pos"
0 0 4 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 25 #";store-size: -> <integer>"
0 0 4 29 1 #"\n"
0 0 17 3 38 #";Permite conocer el tama\303\261o del store."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 10 #"store-size"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 5 #"store"
0 0 4 3 1 #" "
0 0 14 3 10 #"str-global"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 7 #"a-store"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"vec-vals"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-length"
0 0 4 3 1 #" "
0 0 14 3 8 #"vec-vals"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 44 #";simbolo-no-asignado?: <symbol> -> <boolean>"
0 0 4 29 1 #"\n"
0 0 17 3 92
(
 #";permite saber si un simbolo es igual al simbolo var-no-asig que ind"
 #"ica que una variable no "
) 0 0 4 29 1 #"\n"
0 0 17 3 18 #";ha sido asignada."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 20 #"simbolo-no-asignado?"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"sym"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 3 #"sym"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 50 #";extend-store-varios: <vector-of-values> -> <list>"
0 0 4 29 1 #"\n"
0 0 17 3 83
(
 #";Extiende el store str, para almacenar los valores contenidos en el "
 #"vector valores,"
) 0 0 4 29 1 #"\n"
0 0 17 3 91
(
 #";y devuelve una lista con el listado de las posiciones que fueron as"
 #"ignadas a esos valores."
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 19 #"extend-store-varios"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"valores"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 5 #"store"
0 0 4 3 1 #" "
0 0 14 3 10 #"str-global"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 7 #"a-store"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"vec-vals"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 16 #"size-store-viejo"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"store-size"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 10 #"str-global"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"a-store"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-append"
0 0 4 3 1 #" "
0 0 14 3 8 #"vec-vals"
0 0 4 3 1 #" "
0 0 14 3 7 #"valores"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"("
0 0 14 3 23 #"construir-lista-numeros"
0 0 4 3 1 #" "
0 0 14 3 16 #"size-store-viejo"
0 0 4 3 5 #"     "
0 0 4 29 1 #"\n"
0 0 4 3 44 #"                                            "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"store-size"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 8 #"))))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 92
(
 #";*******************************************************************"
 #"************************"
) 0 0 4 29 1 #"\n"
0 0 17 3 15 #";Procedimientos"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 30 #";;Datatype para procedimientos"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 4 3 1 #" "
0 0 14 3 7 #"procval"
0 0 4 3 1 #" "
0 0 14 3 8 #"procval?"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 7 #"closure"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 3 #"nom"
0 0 4 3 1 #" "
0 0 14 3 12 #"nombre-proc?"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 4 #"vars"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"list-of"
0 0 4 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 6 #"cuerpo"
0 0 4 3 1 #" "
0 0 14 3 7 #"cuerpo?"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 7 #"funcion"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 3 #"nom"
0 0 4 3 1 #" "
0 0 14 3 12 #"nombre-proc?"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 4 #"vars"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"list-of"
0 0 4 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 6 #"cuerpo"
0 0 4 3 1 #" "
0 0 14 3 7 #"cuerpo?"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 104
(
 #";;apply-procedure: <procval> <lista de argumentos> -> numero | boole"
 #"ano | registro | procedimiento |null"
) 0 0 4 29 1 #"\n"
0 0 17 3 98
(
 #";;apply-procedure: evalua el cuerpo de un procedimientos en el ambie"
 #"nte extendido correspondiente "
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 15 #"apply-procedure"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"procedimiento"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 7 #"procval"
0 0 4 3 1 #" "
0 0 14 3 13 #"procedimiento"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 7 #"closure"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"nom"
0 0 4 3 1 #" "
0 0 14 3 4 #"vars"
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 10 #"varfrescas"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"extend-store-varios"
0 0 22 3 1 #"("
0 0 14 3 12 #"list->vector"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 22 3 1 #"("
0 0 14 3 11 #"eval-cuerpo"
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 4 29 1 #"\n"
0 0 4 3 34 #"                                  "
0 0 22 3 1 #"("
0 0 14 3 10 #"extend-env"
0 0 4 3 1 #" "
0 0 14 3 4 #"vars"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"list->vector"
0 0 4 3 1 #" "
0 0 14 3 10 #"varfrescas"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 14 3 4 #"void"
0 0 22 3 3 #")))"
0 0 17 3 70
(
 #";;Procedimientos no devuelven nada, entonces el valor por defecto vo"
 #"id"
) 0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 7 #"funcion"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"nom"
0 0 4 3 1 #" "
0 0 14 3 4 #"vars"
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 10 #"varfrescas"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"extend-store-varios"
0 0 22 3 1 #"("
0 0 14 3 12 #"list->vector"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"("
0 0 14 3 11 #"eval-cuerpo"
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 4 29 1 #"\n"
0 0 4 3 32 #"                                "
0 0 22 3 1 #"("
0 0 14 3 10 #"extend-env"
0 0 4 3 1 #" "
0 0 14 3 4 #"vars"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"list->vector"
0 0 4 3 1 #" "
0 0 14 3 10 #"varfrescas"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 8 #"))))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 90
(
 #";*******************************************************************"
 #"**********************"
) 0 0 4 29 1 #"\n"
0 0 17 3 48 #";Tipo de dato vacio (usado para skip y app-proc)"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 4 3 1 #" "
0 0 14 3 5 #"vacio"
0 0 4 3 1 #" "
0 0 14 3 6 #"vacio?"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"void"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 89
(
 #";*******************************************************************"
 #"*********************"
) 0 0 4 29 1 #"\n"
0 0 17 3 10 #";Registros"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 24 #";;Datatype para registro"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 4 3 1 #" "
0 0 14 3 8 #"registro"
0 0 4 3 1 #" "
0 0 14 3 9 #"registro?"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 12 #"empty-record"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 5 #"label"
0 0 4 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 10 #"record-exp"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 5 #"label"
0 0 4 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 6 #"campos"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"list-of"
0 0 4 3 1 #" "
0 0 14 3 6 #"campo?"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 10 #"posiciones"
0 0 4 3 1 #" "
0 0 14 3 7 #"vector?"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 80
(
 #";crear-registro:  <atomo> <list-of-campos> <list-of-valores> <env> -"
 #"> <registro>"
) 0 0 4 29 1 #"\n"
0 0 17 3 106
(
 #";Crea un registro con la etiqueta, los campos y las posiciones de lo"
 #"s valores en el store para cada campo:"
) 0 0 4 29 1 #"\n"
0 0 17 3 94
(
 #";Primero en el store se almacenan los valores de los campos que sean"
 #" diferentes a una variable"
) 0 0 4 29 1 #"\n"
0 0 17 3 25 #";Se actualiza en el store"
0 0 4 29 1 #"\n"
0 0 17 3 113
(
 #";Luego asigna a cada campo un (a-var pos) que apunta a la posicion e"
 #"n el store de su valor  y se crea el registro"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 14 #"crear-registro"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"etiqueta"
0 0 4 3 1 #" "
0 0 14 3 6 #"campos"
0 0 4 3 1 #" "
0 0 14 3 7 #"valores"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 51 #"lista-store-posiciones-valores-campo-no-almacenados"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 45 #"llenar-store-con-valores-campo-no-almacenados"
0 0 4 3 1 #" "
0 0 14 3 7 #"valores"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 35 #"posiciones-asignadas-a-no-variables"
0 0 4 3 1 #" "
0 0 14 3 51 #"lista-store-posiciones-valores-campo-no-almacenados"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 28 #"posiciones-todos-los-valores"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 30 #"reunir-todas-posiciones-campos"
0 0 4 3 1 #" "
0 0 14 3 7 #"valores"
0 0 4 3 1 #" "
0 0 14 3 35 #"posiciones-asignadas-a-no-variables"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 1 #"("
0 0 14 3 22 #"asignar-a-var-a-campos"
0 0 4 3 2 #"  "
0 0 14 3 8 #"etiqueta"
0 0 4 3 1 #" "
0 0 14 3 6 #"campos"
0 0 4 3 1 #" "
0 0 14 3 28 #"posiciones-todos-los-valores"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 6 #"))))))"
0 0 17 3 47 #";asignar-a-var-a-campos devuelve registro lleno"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 71
(
 #";crear-registro:  <list-of-valores> <env> -> <lista-storeconposicion"
 #"es>"
) 0 0 4 29 1 #"\n"
0 0 17 3 135
(
 #";Devuelve una lista del store y las posiciones de los valores de los"
 #" campos que no sean equivalentes a variables reservadas en el store"
) 0 0 4 29 1 #"\n"
0 0 17 3 13 #";Ej: campo1:5"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 45 #"llenar-store-con-valores-campo-no-almacenados"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"valores"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 3 3 #"   "
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 19 #"extend-store-varios"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"list->vector"
0 0 22 3 1 #"("
0 0 14 3 38 #"reunir-valores-no-almacenados-en-store"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"eval-rands"
0 0 4 3 1 #" "
0 0 14 3 7 #"valores"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 3 2 #"  "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 98
(
 #";reunir-valoresnoalmacenados-en-store  <list-of-valores> <env> -> <l"
 #"ist-of-valores-no-almacenados>"
) 0 0 4 29 1 #"\n"
0 0 17 3 88
(
 #";Guarda en una lista los valores de los campos que aun no estan alma"
 #"cenados en el store "
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 38 #"reunir-valores-no-almacenados-en-store"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"valores"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 14 3 7 #"valores"
0 0 22 3 1 #")"
0 0 4 3 3 #"   "
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 20 3 1 #"'"
0 0 22 3 2 #"()"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 22 3 1 #"("
0 0 14 3 10 #"expresion?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 7 #"valores"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 7 #"valores"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 7 #"valores"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 7 #"var-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 22 3 1 #")"
0 0 20 3 1 #"'"
0 0 22 3 3 #"())"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 7 #"valores"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 38 #"reunir-valores-no-almacenados-en-store"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 7 #"valores"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 5 #")))))"
0 0 4 3 3 #"   "
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 4 29 1 #"\n"
0 0 17 3 101
(
 #";reunir-todas-posiciones-campos  <list-of-valores> <list-of-posicion"
 #"es> <env> -> <list-of-posiciones>"
) 0 0 4 29 1 #"\n"
0 0 17 3 90
(
 #";Guarda en una lista las posiciones en el store de los valores de ca"
 #"da campo del registro "
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 30 #"reunir-todas-posiciones-campos"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"valores"
0 0 4 3 1 #" "
0 0 14 3 35 #"posiciones-asignadas-a-no-variables"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 42 #"posiciones-asignadas-a-no-variables-actual"
0 0 4 3 1 #" "
0 0 14 3 35 #"posiciones-asignadas-a-no-variables"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 14 3 7 #"valores"
0 0 22 3 1 #")"
0 0 4 3 3 #"   "
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 20 3 1 #"'"
0 0 22 3 2 #"()"
0 0 4 3 9 #"         "
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 7 #"valores"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 7 #"var-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 22 3 1 #"("
0 0 14 3 9 #"apply-env"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 35 #"posiciones-asignadas-a-no-variables"
0 0 22 3 3 #")))"
0 0 4 3 15 #"               "
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 30 #"reunir-todas-posiciones-campos"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 7 #"valores"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 35 #"posiciones-asignadas-a-no-variables"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 17 3 102
(
 #";asignar-a-var-a-campos  <registro> <atomo> <list-of-campos> <list-o"
 #"f-posiciones> <env>  -> <registro>"
) 0 0 4 29 1 #"\n"
0 0 17 3 143
(
 #";Guarda en una lista los (a-var pos) que contienen cada campo del re"
 #"gistro corresondiente a su valor y devuelve el registro con los (a-v"
 #"ar pos)"
) 0 0 4 29 1 #"\n"
0 0 17 3 24 #";asignados a cada campo."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 22 #"asignar-a-var-a-campos"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"etiqueta"
0 0 4 3 1 #" "
0 0 14 3 6 #"campos"
0 0 4 3 1 #" "
0 0 14 3 10 #"posiciones"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 10 #"posiciones"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 22 #"reunir-a-var-de-campos"
0 0 4 3 1 #" "
0 0 14 3 10 #"posiciones"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 13 #"registrolleno"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"record-exp"
0 0 4 3 1 #" "
0 0 14 3 8 #"etiqueta"
0 0 4 3 1 #" "
0 0 14 3 6 #"campos"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"list->vector"
0 0 4 3 1 #" "
0 0 14 3 10 #"posiciones"
0 0 22 3 4 #"))))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 14 3 13 #"registrolleno"
0 0 22 3 4 #"))))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 70
(
 #";reunir-a-var-de-campos  <list-of-posiciones> <env> -> <list-of-a-va"
 #"r>"
) 0 0 4 29 1 #"\n"
0 0 17 3 101
(
 #";Guarda en una lista los (a-var pos) que contienen cada campo del re"
 #"gistro correspondiente a su valor"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 22 #"reunir-a-var-de-campos"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"posiciones"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 14 3 10 #"posiciones"
0 0 22 3 1 #")"
0 0 4 3 3 #"   "
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 20 3 1 #"'"
0 0 22 3 2 #"()"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 5 #"a-var"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 10 #"posiciones"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 22 #"reunir-a-var-de-campos"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 10 #"posiciones"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 5 #")))))"
0 0 4 3 3 #"   "
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";obtener-posicion-campo: <registro> <campo> -> <integer>"
0 0 4 29 1 #"\n"
0 0 17 3 79
(
 #";Permite obtener el valor que hay en un campo de un registro (vacio "
 #"o no vacio)"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 19 #"obtener-valor-campo"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"campo"
0 0 4 3 1 #" "
0 0 14 3 5 #"regis"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 8 #"registro"
0 0 4 3 1 #" "
0 0 14 3 5 #"regis"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 12 #"empty-record"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"label"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 22 #"obtener-posicion-campo"
0 0 4 3 1 #" "
0 0 19 3 27 #"\"El registro ~s es vac\303\255o.\""
0 0 4 3 1 #" "
0 0 14 3 5 #"label"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 10 #"record-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"label"
0 0 4 3 1 #" "
0 0 14 3 6 #"campos"
0 0 4 3 1 #" "
0 0 14 3 10 #"posiciones"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 22 3 2 #"(("
0 0 14 3 3 #"pos"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"list-find-position"
0 0 4 3 1 #" "
0 0 14 3 5 #"campo"
0 0 4 3 1 #" "
0 0 14 3 6 #"campos"
0 0 22 3 3 #")))"
0 0 4 3 19 #"                   "
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"number?"
0 0 4 3 1 #" "
0 0 14 3 3 #"pos"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                        "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 8 #"variable"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 10 #"posiciones"
0 0 4 3 1 #" "
0 0 14 3 3 #"pos"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 25 #"                         "
0 0 22 3 1 #"("
0 0 14 3 5 #"a-var"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"posicion"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 32 #"                                "
0 0 22 3 1 #"("
0 0 14 3 11 #"apply-store"
0 0 4 3 1 #" "
0 0 14 3 8 #"posicion"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                        "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 19 #"obtener-valor-campo"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 36 #"                                    "
0 0 19 3 48 #"\"El campo ~s no se encuentra en el registro ~s.\""
0 0 4 3 1 #" "
0 0 14 3 5 #"campo"
0 0 4 3 1 #" "
0 0 14 3 5 #"label"
0 0 22 3 7 #")))))))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 70
(
 #";registros-iguales-para-unificar?: <registro> <registro> -> <boolean"
 #"o>"
) 0 0 4 29 1 #"\n"
0 0 17 3 71
(
 #";Determina si dos registros son iguales. (V\303\241lidos para ser un"
 #"ificados)"
) 0 0 4 29 1 #"\n"
0 0 17 3 69
(
 #";Etiquetas iguales, igual numero de campos, iguales nombres de campo"
 #"s"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 32 #"registros-iguales-para-unificar?"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"regis1"
0 0 4 3 1 #" "
0 0 14 3 6 #"regis2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 8 #"registro"
0 0 4 3 1 #" "
0 0 14 3 6 #"regis1"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 12 #"empty-record"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"label"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 6 #"label1"
0 0 4 3 1 #" "
0 0 14 3 5 #"label"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 8 #"registro"
0 0 4 3 1 #" "
0 0 14 3 6 #"regis1"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                        "
0 0 22 3 1 #"("
0 0 14 3 12 #"empty-record"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"label"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                      "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 6 #"label1"
0 0 4 3 1 #" "
0 0 14 3 5 #"label"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                        "
0 0 22 3 1 #"("
0 0 14 3 10 #"record-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"label"
0 0 4 3 1 #" "
0 0 14 3 6 #"campos"
0 0 4 3 1 #" "
0 0 14 3 7 #"valores"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 36 #"                                    "
0 0 22 3 1 #"("
0 0 20 3 2 #"#f"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 10 #"record-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"label1"
0 0 4 3 1 #" "
0 0 14 3 7 #"campos1"
0 0 4 3 1 #" "
0 0 14 3 11 #"posiciones1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 8 #"registro"
0 0 4 3 1 #" "
0 0 14 3 6 #"regis2"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 22 3 1 #"("
0 0 14 3 12 #"empty-record"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"label2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 36 #"                                    "
0 0 22 3 1 #"("
0 0 20 3 2 #"#f"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 22 3 1 #"("
0 0 14 3 10 #"record-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"label2"
0 0 4 3 1 #" "
0 0 14 3 7 #"campos2"
0 0 4 3 1 #" "
0 0 14 3 11 #"posiciones2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 34 #"                                  "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 6 #"label1"
0 0 4 3 1 #" "
0 0 14 3 6 #"label2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 39 #"                                       "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 7 #"campos1"
0 0 4 3 1 #" "
0 0 14 3 7 #"campos2"
0 0 22 3 8 #"))))))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 17 3 78
(
 #";crear-listas-aux?: <list-of-expression> <ambiente> -> <expresion-re"
 #"cord-exp1>"
) 0 0 4 29 1 #"\n"
0 0 17 3 18 #";Funcion que llama"
0 0 17 3 1 #" "
0 0 17 3 2 #"al"
0 0 17 3 1 #" "
0 0 17 3 7 #"m\303\251todo"
0 0 17 3 1 #" "
0 0 17 3 19 #"eval-.expressioncon"
0 0 17 3 1 #" "
0 0 17 3 2 #"un"
0 0 17 3 1 #" "
0 0 17 3 11 #"record-exp1"
0 0 17 3 1 #" "
0 0 17 3 4 #"para"
0 0 17 3 1 #" "
0 0 17 3 3 #"que"
0 0 17 3 1 #" "
0 0 17 3 8 #"almacene"
0 0 17 3 1 #" "
0 0 17 3 2 #"en"
0 0 17 3 1 #" "
0 0 17 3 2 #"el"
0 0 17 3 1 #" "
0 0 17 3 5 #"store"
0 0 17 3 1 #" "
0 0 17 3 13 #"correctamente"
0 0 17 3 1 #" "
0 0 17 3 3 #"una"
0 0 17 3 7 #" lista."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 13 #"crear-listas2"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"exps"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 15 #"eval-expression"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"crear-listas-aux"
0 0 4 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 55 #";crear-listas-aux?: <list-of-expression>  -> <registro>"
0 0 4 29 1 #"\n"
0 0 17 3 36 #";Funcion que se encarga de construir"
0 0 17 3 1 #" "
0 0 17 3 3 #"una"
0 0 17 3 1 #" "
0 0 17 3 10 #"expresi\303\263n"
0 0 17 3 1 #" "
0 0 17 3 2 #"de"
0 0 17 3 1 #" "
0 0 17 3 4 #"tipo"
0 0 17 3 1 #" "
0 0 17 3 11 #"record-exp1"
0 0 17 3 1 #" "
0 0 17 3 3 #"con"
0 0 17 3 1 #" "
0 0 17 3 3 #"una"
0 0 17 3 1 #" "
0 0 17 3 8 #"etiqueta"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"l"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 2 #"un"
0 0 17 3 1 #" "
0 0 17 3 6 #"primer"
0 0 17 3 1 #" "
0 0 17 3 5 #"campo"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"h"
0 0 17 3 1 #","
0 0 17 3 2 #"  "
0 0 17 3 3 #"que"
0 0 17 3 1 #" "
0 0 17 3 6 #"guarda"
0 0 17 3 1 #" "
0 0 17 3 2 #"el"
0 0 17 3 1 #" "
0 0 17 3 6 #"primer"
0 0 17 3 1 #" "
0 0 17 3 5 #"valor"
0 0 17 3 1 #" "
0 0 17 3 2 #"de"
0 0 17 3 1 #" "
0 0 17 3 2 #"la"
0 0 17 3 1 #" "
0 0 17 3 5 #"lista"
0 0 17 3 1 #" "
0 0 17 3 1 #"y"
0 0 17 3 1 #" "
0 0 17 3 2 #"un"
0 0 17 3 1 #" "
0 0 17 3 7 #"segundo"
0 0 17 3 1 #" "
0 0 17 3 5 #"campo"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"t"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 3 #"que"
0 0 17 3 1 #" "
0 0 17 3 6 #"guarda"
0 0 17 3 1 #" "
0 0 17 3 3 #"una"
0 0 17 3 1 #" "
0 0 17 3 10 #"expresi\303\263n"
0 0 17 3 1 #" "
0 0 17 3 11 #"record-exp1"
0 0 17 3 1 #" "
0 0 17 3 3 #"con"
0 0 17 3 1 #" "
0 0 17 3 3 #"dos"
0 0 17 3 1 #" "
0 0 17 3 6 #"campos"
0 0 17 3 2 #"  "
0 0 17 3 1 #"'"
0 0 17 3 1 #"h"
0 0 17 3 1 #" "
0 0 17 3 1 #"y"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"t"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 5 #"donde"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"h"
0 0 17 3 1 #" "
0 0 17 3 6 #"guarda"
0 0 17 3 1 #" "
0 0 17 3 2 #"el"
0 0 17 3 1 #" "
0 0 17 3 7 #"segundo"
0 0 17 3 1 #" "
0 0 17 3 8 #"elemento"
0 0 17 3 1 #" "
0 0 17 3 1 #"y"
0 0 17 3 1 #" "
0 0 17 3 3 #"y  "
0 0 4 29 1 #"\n"
0 0 17 3 5 #";otro"
0 0 17 3 1 #" "
0 0 17 3 8 #"registro"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 4 #"as\303\255"
0 0 17 3 2 #"  "
0 0 17 3 5 #"hasta"
0 0 17 3 1 #" "
0 0 17 3 6 #"llegar"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 2 #"un"
0 0 17 3 1 #" "
0 0 17 3 10 #"record-exp"
0 0 17 3 1 #" "
0 0 17 3 5 #"donde"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"h"
0 0 17 3 1 #" "
0 0 17 3 3 #"sea"
0 0 17 3 1 #" "
0 0 17 3 2 #"el"
0 0 17 3 1 #" "
0 0 17 3 7 #"\303\272ltimo"
0 0 17 3 1 #" "
0 0 17 3 8 #"elemento"
0 0 17 3 1 #" "
0 0 17 3 2 #"de"
0 0 17 3 1 #" "
0 0 17 3 2 #"la"
0 0 17 3 1 #" "
0 0 17 3 5 #"lista"
0 0 17 3 1 #" "
0 0 17 3 1 #"y"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"t"
0 0 17 3 1 #" "
0 0 17 3 2 #"el"
0 0 17 3 1 #" "
0 0 17 3 6 #"\303\241tomo"
0 0 17 3 1 #" "
0 0 17 3 5 #"nil. "
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 16 #"crear-listas-aux"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"exps"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 5 #"caml1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"campo-1"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"h"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 5 #"caml2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"campo-1"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 6 #"atonil"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"record-exp2"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"nil"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 14 3 6 #"atonil"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 11 #"record-exp1"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"l"
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                       "
0 0 14 3 5 #"caml1"
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 2 #"  "
0 0 14 3 5 #"caml2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"crear-listas-aux"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 8 #"))))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 21 #";Forma 2 crear listas"
0 0 4 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 13 #" crear-listas"
0 0 4 29 1 #"\n"
0 0 17 3 3 #";  "
0 0 17 3 1 #"("
0 0 17 3 6 #"lambda"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 3 #"reg"
0 0 17 3 1 #" "
0 0 17 3 5 #"lista"
0 0 17 3 1 #" "
0 0 17 3 4 #"env)"
0 0 4 29 1 #"\n"
0 0 17 3 5 #";    "
0 0 17 3 1 #"("
0 0 17 3 3 #"let"
0 0 17 3 1 #" "
0 0 17 3 2 #"(("
0 0 17 3 5 #"caml1"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 7 #"campo-1"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 3 #"h))"
0 0 4 29 1 #"\n"
0 0 17 3 11 #";          "
0 0 17 3 1 #"("
0 0 17 3 5 #"caml2"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 7 #"campo-1"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 3 #"t))"
0 0 4 29 1 #"\n"
0 0 17 3 11 #";          "
0 0 17 3 1 #"("
0 0 17 3 6 #"atonil"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 11 #"record-exp2"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 6 #"nil)))"
0 0 4 29 1 #"\n"
0 0 17 3 7 #";      "
0 0 17 3 6 #"(begin"
0 0 4 29 1 #"\n"
0 0 17 3 9 #";        "
0 0 17 3 1 #"("
0 0 17 3 5 #"cases"
0 0 17 3 1 #" "
0 0 17 3 8 #"registro"
0 0 17 3 4 #" reg"
0 0 4 29 1 #"\n"
0 0 17 3 11 #";          "
0 0 17 3 1 #"("
0 0 17 3 10 #"record-exp"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 5 #"label"
0 0 17 3 1 #" "
0 0 17 3 5 #"campo"
0 0 17 3 1 #" "
0 0 17 3 4 #"val)"
0 0 4 29 1 #"\n"
0 0 17 3 23 #";                      "
0 0 17 3 1 #"("
0 0 17 3 3 #"let"
0 0 17 3 1 #" "
0 0 17 3 2 #"(("
0 0 17 3 7 #"valores"
0 0 17 3 1 #"("
0 0 17 3 12 #"vector->list"
0 0 17 3 1 #" "
0 0 17 3 6 #"val)))"
0 0 4 29 1 #"\n"
0 0 17 3 25 #";                        "
0 0 17 3 1 #"("
0 0 17 3 2 #"if"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 6 #"length"
0 0 17 3 1 #" "
0 0 17 3 5 #"lista"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 2 #"1)"
0 0 4 29 1 #"\n"
0 0 17 3 29 #";                            "
0 0 17 3 1 #"("
0 0 17 3 14 #"crear-registro"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"l"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 5 #"caml1"
0 0 17 3 1 #" "
0 0 17 3 5 #"caml2"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 3 #"car"
0 0 17 3 1 #" "
0 0 17 3 5 #"lista"
0 0 17 3 2 #")("
0 0 17 3 11 #"record-exp1"
0 0 17 3 1 #" "
0 0 17 3 5 #"label"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 3 #"car"
0 0 17 3 1 #" "
0 0 17 3 5 #"campo"
0 0 17 3 2 #")("
0 0 17 3 3 #"car"
0 0 17 3 1 #" "
0 0 17 3 7 #"valores"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 17 3 5 #"campo"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 17 3 7 #"valores"
0 0 17 3 3 #")))"
0 0 17 3 1 #" "
0 0 17 3 3 #"env"
0 0 17 3 2 #") "
0 0 4 29 1 #"\n"
0 0 17 3 1 #";"
0 0 4 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 12 #"crear-listas"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 10 #"record-exp"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"l"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 5 #"caml1"
0 0 17 3 1 #" "
0 0 17 3 5 #"caml2"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 6 #"vector"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 3 #"car"
0 0 17 3 1 #" "
0 0 17 3 5 #"lista"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 11 #"record-exp1"
0 0 17 3 1 #" "
0 0 17 3 5 #"label"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 3 #"car"
0 0 17 3 1 #" "
0 0 17 3 5 #"campo"
0 0 17 3 2 #")("
0 0 17 3 3 #"car"
0 0 17 3 1 #" "
0 0 17 3 7 #"valores"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 17 3 5 #"campo"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 17 3 7 #"valores"
0 0 17 3 4 #"))))"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 17 3 5 #"lista"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 7 #"env))))"
0 0 4 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 4 #"else"
0 0 17 3 1 #" "
0 0 17 3 12 #"\"null\"))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 89
(
 #";*******************************************************************"
 #"*********************"
) 0 0 4 29 1 #"\n"
0 0 17 3 23 #";Algoritmo Unificaci\303\263n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 71
(
 #";aclaracion: null es nada, <void> es del tipo de dato vacio que crea"
 #"mos"
) 0 0 4 29 1 #"\n"
0 0 17 3 60
#";unificacion: <termino1> <termino2> <env> -> <void> | null  "
0 0 4 29 1 #"\n"
0 0 17 3 144
(
 #";Se comparan dos terminos t1 y t2 cuando los dos son del mismo tipo "
 #"o en algunos casos de otro tipo de acuerdo a las situaciones de unif"
 #"icacion."
) 0 0 4 29 1 #"\n"
0 0 17 3 138
(
 #";Cada termino equivale a: variable, entero, flotante, registro vacio"
 #", registro no vacio,acceso a registrom lista procedimiento y funcion"
 #", "
) 0 0 4 29 1 #"\n"
0 0 17 3 11 #";aplicacion"
0 0 17 3 1 #" "
0 0 17 3 2 #"de"
0 0 17 3 1 #" "
0 0 17 3 13 #"procedimiento"
0 0 17 3 1 #" "
0 0 17 3 1 #"y"
0 0 17 3 1 #" "
0 0 17 3 2 #"de"
0 0 17 3 1 #" "
0 0 17 3 7 #"funcion"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 1 #"y"
0 0 17 3 1 #" "
0 0 17 3 10 #"aplicacion"
0 0 17 3 1 #" "
0 0 17 3 2 #"de"
0 0 17 3 34 #" una primitiva, condicional, ciclo"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 11 #"unificacion"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 2 #"  "
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 7 #"var-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"id1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 18 #"                  "
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 17 3 44 #";si t1 es una variable y t2 es una variable "
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 7 #"var-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"id2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 26 #"                          "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 4 #"vlr1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"eval-expression"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 32 #"                                "
0 0 22 3 1 #"("
0 0 14 3 4 #"vlr2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"eval-expression"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 28 #"                            "
0 0 17 3 37 #";si t1 y t2 son o no el mismo termino"
0 0 4 29 1 #"\n"
0 0 4 3 28 #"                            "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 3 #"id1"
0 0 4 3 1 #" "
0 0 14 3 3 #"id2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 31 #"                               "
0 0 22 3 1 #"("
0 0 14 3 4 #"void"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 31 #"                               "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 35 #"                                   "
0 0 4 29 1 #"\n"
0 0 4 3 34 #"                                  "
0 0 17 3 64
#";si t1 es una variable no asignada y t2 es una variable asignada"
0 0 4 29 1 #"\n"
0 0 4 3 34 #"                                  "
0 0 17 3 48 #";se modifica pos en el store de t1 por pos de t2"
0 0 4 29 1 #"\n"
0 0 4 3 34 #"                                  "
0 0 22 3 2 #"(("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"or"
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 4 #"vlr1"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 3 #"id1"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 3 #"))("
0 0 14 3 3 #"not"
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 4 #"vlr2"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 35 #"                                   "
0 0 22 3 1 #"("
0 0 14 3 9 #"set-store"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"apply-env"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 14 3 3 #"id1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"a-var"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 9 #"apply-env"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 14 3 3 #"id2"
0 0 22 3 4 #"))))"
0 0 4 3 34 #"                                  "
0 0 4 29 1 #"\n"
0 0 4 3 34 #"                                  "
0 0 17 3 64
#";si t1 es una variable asignada y t2 es una variable no asignada"
0 0 4 29 1 #"\n"
0 0 4 3 34 #"                                  "
0 0 17 3 49 #";se modifica pos en el store de t2 por pos de t1 "
0 0 4 29 1 #"\n"
0 0 4 3 34 #"                                  "
0 0 22 3 2 #"(("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"or"
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 4 #"vlr2"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 3 #"id2"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 2 #"))"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 4 #"vlr1"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 35 #"                                   "
0 0 22 3 1 #"("
0 0 14 3 9 #"set-store"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"apply-env"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 14 3 3 #"id2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"a-var"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 9 #"apply-env"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 14 3 3 #"id1"
0 0 22 3 4 #"))))"
0 0 4 3 34 #"                                  "
0 0 4 29 1 #"\n"
0 0 4 3 34 #"                                  "
0 0 17 3 68
#";si t1 es una variable no asignada y t2 es una variable no asignada "
0 0 4 29 1 #"\n"
0 0 4 3 34 #"                                  "
0 0 17 3 44 #";t1 y t2 se convierten en la misma variable "
0 0 4 29 1 #"\n"
0 0 4 3 34 #"                                  "
0 0 22 3 2 #"(("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"or"
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 4 #"vlr1"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 2 #")("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 3 #"id1"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"or"
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 4 #"vlr2"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 2 #")("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 3 #"id2"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 42 #"                                          "
0 0 22 3 1 #"("
0 0 14 3 12 #"extend-store"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 42 #"                                          "
0 0 22 3 1 #"("
0 0 14 3 9 #"set-store"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"apply-env"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 14 3 3 #"id2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"a-var"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"store-size"
0 0 22 3 1 #")"
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 42 #"                                          "
0 0 22 3 1 #"("
0 0 14 3 9 #"set-store"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"apply-env"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 14 3 3 #"id1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"a-var"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"store-size"
0 0 22 3 1 #")"
0 0 20 3 1 #"1"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 34 #"                                  "
0 0 17 3 95
(
 #";si t1 es una variable ya asignada y t2 es una variable ya asignada "
 #"y sus valores son registros"
) 0 0 4 29 1 #"\n"
0 0 4 3 34 #"                                  "
0 0 22 3 2 #"(("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 4 #"vlr1"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 4 #"vlr2"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"registro?"
0 0 4 3 1 #" "
0 0 14 3 4 #"vlr1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"registro?"
0 0 4 3 1 #" "
0 0 14 3 4 #"vlr2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 32 #"registros-iguales-para-unificar?"
0 0 4 3 1 #" "
0 0 14 3 4 #"vlr1"
0 0 4 3 1 #" "
0 0 14 3 4 #"vlr2"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 41 #"                                         "
0 0 22 3 1 #"("
0 0 14 3 18 #"unificar-registros"
0 0 4 3 1 #" "
0 0 14 3 4 #"vlr1"
0 0 4 3 1 #" "
0 0 14 3 4 #"vlr2"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 34 #"                                  "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"unificacion"
0 0 4 3 1 #" "
0 0 19 3 108
(
 #"\"Error de unificacion: Las variables ~s y ~s solo se pueden asignar"
 #" una vez. O los regsitros no son iguales\""
) 0 0 4 3 1 #" "
0 0 14 3 3 #"id1"
0 0 4 3 1 #" "
0 0 14 3 3 #"id2"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 3 33 #"                                 "
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 17 3 37 #";si t1 es una variable y t2 un entero"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 10 #"entero-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"ent"
0 0 22 3 2 #")("
0 0 14 3 19 #"auxiliarUnificacion"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"id1"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 22 3 2 #"))"
0 0 4 3 18 #"                  "
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 17 3 39 #";si t1 es una variable y t2 un flotante"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 12 #"flotante-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"flot"
0 0 22 3 2 #")("
0 0 14 3 19 #"auxiliarUnificacion"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"id1"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 22 3 2 #"))"
0 0 4 3 17 #"                 "
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 17 3 72
(
 #";si t1 es una variable y t2 es un registro de tipo 1 (registro compl"
 #"eto)"
) 0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 11 #"record-exp1"
0 0 22 3 1 #"("
0 0 14 3 5 #"label"
0 0 4 3 1 #" "
0 0 14 3 4 #"feat"
0 0 4 3 1 #" "
0 0 14 3 3 #"exp"
0 0 4 3 1 #" "
0 0 14 3 8 #"features"
0 0 4 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 2 #")("
0 0 14 3 19 #"auxiliarUnificacion"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"id1"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 22 3 2 #"))"
0 0 4 3 16 #"                "
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 17 3 60
#";si t1 es una variable y t2 es un registro de tipo 2 (atomo)"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 11 #"record-exp2"
0 0 22 3 1 #"("
0 0 14 3 5 #"label"
0 0 22 3 2 #")("
0 0 14 3 19 #"auxiliarUnificacion"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"id1"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 22 3 2 #"))"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 17 3 57 #"                 ;si t1 es una variable y t2 es una lista"
0 0 4 29 1 #"\n"
0 0 17 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 8 #"list-exp"
0 0 22 3 1 #"("
0 0 14 3 3 #"exp"
0 0 17 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 2 #")("
0 0 14 3 19 #"auxiliarUnificacion"
0 0 17 3 1 #" "
0 0 14 3 2 #"t2"
0 0 17 3 1 #" "
0 0 14 3 3 #"id1"
0 0 17 3 1 #" "
0 0 14 3 3 #"env"
0 0 17 3 1 #" "
0 0 22 3 2 #"))"
0 0 17 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 17 3 79
(
 #";si t1 es una variable y t2 es un acceso a un valor de un campo de u"
 #"n registro "
) 0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 14 #"asg-record-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"expreg"
0 0 4 3 1 #" "
0 0 14 3 8 #"expcampo"
0 0 22 3 2 #")("
0 0 14 3 19 #"auxiliarUnificacion"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"id1"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 22 3 2 #"))"
0 0 4 3 16 #"                "
0 0 4 3 11 #"           "
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 17 3 43 #";si t1 es una variable y t2 es una funcion "
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 7 #"fun-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"nombre"
0 0 4 3 1 #" "
0 0 14 3 4 #"vars"
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 22 3 2 #")("
0 0 14 3 26 #"auxiliarUnificacionProcFun"
0 0 4 3 1 #" "
0 0 14 3 6 #"nombre"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"id1"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 17 3 47 #";si t1 es una variable y t2 es un procedimiento"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 8 #"proc-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"nombre"
0 0 4 3 1 #" "
0 0 14 3 4 #"vars"
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 22 3 2 #")("
0 0 14 3 26 #"auxiliarUnificacionProcFun"
0 0 4 3 1 #" "
0 0 14 3 6 #"nombre"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"id1"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 22 3 2 #"))"
0 0 4 3 3 #"   "
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 17 3 57 #";si t1 es una variable y t2 es una aplicacion de funcion "
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 7 #"app-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"rator"
0 0 4 3 1 #" "
0 0 14 3 5 #"rands"
0 0 22 3 2 #")("
0 0 14 3 24 #"auxiliar-unificacion-app"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"id1"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 22 3 2 #"))"
0 0 4 3 10 #"          "
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 17 3 45 #";si t1 es una variable y t2 es un condicional"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 6 #"if-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"cond-exp"
0 0 4 3 1 #" "
0 0 14 3 10 #"true-curpo"
0 0 4 3 1 #" "
0 0 14 3 7 #"fin-exp"
0 0 22 3 2 #")("
0 0 14 3 19 #"auxiliarUnificacion"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"id1"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 22 3 2 #"))"
0 0 4 3 10 #"          "
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 17 3 55 #";si t1 es una variable y t2 una aplicacion de primitiva"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 8 #"prim-exp"
0 0 22 3 1 #"("
0 0 14 3 4 #"prim"
0 0 4 3 1 #" "
0 0 14 3 5 #"rands"
0 0 22 3 2 #")("
0 0 14 3 19 #"auxiliarUnificacion"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"id1"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"unificacion"
0 0 4 3 1 #" "
0 0 19 3 93
(
 #"\"Error de unificacion. No se puede igualar ~s a la expresion ~s y n"
 #"o son los mismos terminos\""
) 0 0 4 3 1 #" "
0 0 14 3 3 #"id1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 4 #"))))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 10 #"entero-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"ent1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 18 #"                  "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 40 #";si t1 es un entero y t2 es una variable"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 7 #"var-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 22 3 2 #")("
0 0 14 3 19 #"auxiliarUnificacion"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 37 #";si t1 es un entero y t2 es un entero"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 10 #"entero-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"ent2"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 71
(
 #";si t1 es un entero y t2 es un acceso a registro que devuelva un ent"
 #"ero"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 14 #"asg-record-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"expreg"
0 0 4 3 1 #" "
0 0 14 3 8 #"expcampo"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 56 #";si t1 es un entero y t2 es un if que devuelve un entero"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 6 #"if-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"cond-exp"
0 0 4 3 1 #" "
0 0 14 3 10 #"true-curpo"
0 0 4 3 1 #" "
0 0 14 3 7 #"fin-exp"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 95
(
 #";si t1 es un entero y t2 es una aplicacion de procedimiento o de fun"
 #"cion que devuelva un entero"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 7 #"app-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"rator"
0 0 4 3 1 #" "
0 0 14 3 5 #"rands"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 77
(
 #";si t1 es un entero y t2 es una aplicacion de primiiva que devuelve "
 #"un entero"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 8 #"prim-exp"
0 0 22 3 1 #"("
0 0 14 3 4 #"prim"
0 0 4 3 1 #" "
0 0 14 3 5 #"rands"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"unificacion"
0 0 4 3 1 #" "
0 0 19 3 93
(
 #"\"Error de unificacion. No se puede igualar ~s a la expresion ~s y n"
 #"o son los mismos terminos\""
) 0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 12 #"flotante-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"flot1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 18 #"                  "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 42 #";si t1 es un flotante y t2 es una variable"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 7 #"var-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 22 3 2 #")("
0 0 14 3 19 #"auxiliarUnificacion"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 22 3 2 #"))"
0 0 4 3 20 #"                    "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 41 #";si t1 es un flotante y t2 es un flotante"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 12 #"flotante-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"flot2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 75
(
 #";si t1 es un flotante y t2 es un acceso a registro que devuelva un f"
 #"lotante"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 14 #"asg-record-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"expreg"
0 0 4 3 1 #" "
0 0 14 3 8 #"expcampo"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 60
#";si t1 es un flotante y t2 es un if que devuelve un flotante"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 6 #"if-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"cond-exp"
0 0 4 3 1 #" "
0 0 14 3 10 #"true-curpo"
0 0 4 3 1 #" "
0 0 14 3 7 #"fin-exp"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 99
(
 #";si t1 es un flotante y t2 es una aplicacion de procedimiento o de f"
 #"uncion que devuelva un flotante"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 7 #"app-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"rator"
0 0 4 3 1 #" "
0 0 14 3 5 #"rands"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 81
(
 #";si t1 es un flotante y t2 es una aplicacion de primiiva que devuelv"
 #"e un flotante"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 8 #"prim-exp"
0 0 22 3 1 #"("
0 0 14 3 4 #"prim"
0 0 4 3 1 #" "
0 0 14 3 5 #"rands"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"unificacion"
0 0 4 3 1 #" "
0 0 19 3 93
(
 #"\"Error de unificacion. No se puede igualar ~s a la expresion ~s y n"
 #"o son los mismos terminos\""
) 0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 25 #"                         "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 11 #"record-exp1"
0 0 22 3 1 #"("
0 0 14 3 6 #"label1"
0 0 4 3 1 #" "
0 0 14 3 5 #"feat1"
0 0 4 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 4 3 1 #" "
0 0 14 3 9 #"features1"
0 0 4 3 1 #" "
0 0 14 3 5 #"exps1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 18 #"                  "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 51 #";si t1 es un registro no vacio y t2 es una variable"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 7 #"var-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 22 3 2 #")("
0 0 14 3 19 #"auxiliarUnificacion"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 22 3 2 #"))"
0 0 4 3 20 #"                    "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 59
#";si t1 es un registro no vacio y t2 es un registro no vacio"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 11 #"record-exp1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"label2"
0 0 4 3 1 #" "
0 0 14 3 5 #"feat2"
0 0 4 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 4 3 1 #" "
0 0 14 3 9 #"features2"
0 0 4 3 1 #" "
0 0 14 3 5 #"exps2"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 93
(
 #";si t1 es un registro no vacio y t2 es un acceso a registro que devu"
 #"elva un registro no vacio"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 14 #"asg-record-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"expreg"
0 0 4 3 1 #" "
0 0 14 3 8 #"expcampo"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 78
(
 #";si t1 es un registro no vacio y t2 es un if que devuelve un registr"
 #"o no vacio"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 6 #"if-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"cond-exp"
0 0 4 3 1 #" "
0 0 14 3 10 #"true-curpo"
0 0 4 3 1 #" "
0 0 14 3 7 #"fin-exp"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 117
(
 #";si t1 es un regsitro no vacio y t2 es una aplicacion de procedimien"
 #"to o de funcion que devuelva un registro no vacio"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 7 #"app-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"rator"
0 0 4 3 1 #" "
0 0 14 3 5 #"rands"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"unificacion"
0 0 4 3 1 #" "
0 0 19 3 93
(
 #"\"Error de unificacion. No se puede igualar ~s a la expresion ~s y n"
 #"o son los mismos terminos\""
) 0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 4 #"))))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 11 #"record-exp2"
0 0 22 3 1 #"("
0 0 14 3 5 #"label"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 18 #"                  "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 48 #";si t1 es un registro vacio y t2 es una variable"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 7 #"var-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 22 3 2 #")("
0 0 14 3 19 #"auxiliarUnificacion"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 22 3 2 #"))"
0 0 4 3 20 #"                    "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 53 #";si t1 es un registro vacio y t2 es un registro vacio"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 11 #"record-exp2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"label"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 87
(
 #";si t1 es un registro vacio y t2 es un acceso a registro que devuelv"
 #"a un registro vacio"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 14 #"asg-record-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"expreg"
0 0 4 3 1 #" "
0 0 14 3 8 #"expcampo"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 72
(
 #";si t1 es un registro vacio y t2 es un if que devuelve un registro v"
 #"acio"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 6 #"if-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"cond-exp"
0 0 4 3 1 #" "
0 0 14 3 10 #"true-curpo"
0 0 4 3 1 #" "
0 0 14 3 7 #"fin-exp"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 111
(
 #";si t1 es un regsitro vacio y t2 es una aplicacion de procedimiento "
 #"o de funcion que devuelva un registro vacio"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 7 #"app-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"rator"
0 0 4 3 1 #" "
0 0 14 3 5 #"rands"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"unificacion"
0 0 4 3 1 #" "
0 0 19 3 93
(
 #"\"Error de unificacion. No se puede igualar ~s a la expresion ~s y n"
 #"o son los mismos terminos\""
) 0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 4 #"))))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 8 #"list-exp"
0 0 22 3 1 #"("
0 0 14 3 3 #"exp"
0 0 4 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 18 #"                  "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 40 #";si t1 es una lista y t2 es una variable"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 7 #"var-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 22 3 2 #")("
0 0 14 3 19 #"auxiliarUnificacion"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 22 3 2 #"))"
0 0 4 3 20 #"                    "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 37 #";si t1 es una lista y t2 es una lista"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 8 #"list-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"exp"
0 0 4 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 73
(
 #";si t1 es una lista y t2 es un acceso a registro que devuelva un flo"
 #"tante"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 14 #"asg-record-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"expreg"
0 0 4 3 1 #" "
0 0 14 3 8 #"expcampo"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 58
#";si t1 es una lista y t2 es un if que devuelve un flotante"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 6 #"if-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"cond-exp"
0 0 4 3 1 #" "
0 0 14 3 10 #"true-curpo"
0 0 4 3 1 #" "
0 0 14 3 7 #"fin-exp"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 95
(
 #";si t1 es una lista y t2 es una aplicacion de procedimiento o de fun"
 #"cion que devuelve una lista"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 7 #"app-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"rator"
0 0 4 3 1 #" "
0 0 14 3 5 #"rands"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"unificacion"
0 0 4 3 1 #" "
0 0 19 3 93
(
 #"\"Error de unificacion. No se puede igualar ~s a la expresion ~s y n"
 #"o son los mismos terminos\""
) 0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 14 #"asg-record-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"expreg"
0 0 4 3 1 #" "
0 0 14 3 8 #"expcampo"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 18 #"                  "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 60
#";si t1 es el valor de acceso a registro y t2 es una variable"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 7 #"var-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 22 3 2 #")("
0 0 14 3 19 #"auxiliarUnificacion"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 65
#";si t1 es valor de acceso a registro y t2 es un acceso a registro"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 14 #"asg-record-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"exp"
0 0 4 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 55 #";si t1 es valor de  acceso a registro y t2 es un entero"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 10 #"entero-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"ent2"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 4 3 1 #" "
0 0 17 3 56 #";si t1 es valor de acceso a registro y t2 es un flotante"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 12 #"flotante-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"flot2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 66
#";si t1 es valor de  acceso a registro y t2 es un registro no vacio"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 11 #"record-exp1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"label2"
0 0 4 3 1 #" "
0 0 14 3 5 #"feat2"
0 0 4 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 4 3 1 #" "
0 0 14 3 9 #"features2"
0 0 4 3 1 #" "
0 0 14 3 5 #"exps2"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 63
#";si t1 es valor de  acceso a registro y t2 es un registro vacio"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 11 #"record-exp2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"label"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 55 #";si t1 es valor de  acceso a registro y t2 es una lista"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 8 #"list-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"exp"
0 0 4 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 85
(
 #";si t1 es valor de  acceso a registro y t2 es un if que devuelve un "
 #"acceso a registro"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 6 #"if-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"cond-exp"
0 0 4 3 1 #" "
0 0 14 3 10 #"true-curpo"
0 0 4 3 1 #" "
0 0 14 3 7 #"fin-exp"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 121
(
 #";si t1 es valor de  acceso a registro y t2 es una aplicacion de proc"
 #"edimiento o de funcion que devuelve acceso a registro"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 7 #"app-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"rator"
0 0 4 3 1 #" "
0 0 14 3 5 #"rands"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 106
(
 #";si t1 es valor de  acceso a registro y t2 es una aplicacion de prim"
 #"iiva que devuelve un acceso a registro"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 8 #"prim-exp"
0 0 22 3 1 #"("
0 0 14 3 4 #"prim"
0 0 4 3 1 #" "
0 0 14 3 5 #"rands"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"unificacion"
0 0 4 3 1 #" "
0 0 19 3 93
(
 #"\"Error de unificacion. No se puede igualar ~s a la expresion ~s y n"
 #"o son los mismos terminos\""
) 0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 7 #"fun-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"nombre1"
0 0 4 3 1 #" "
0 0 14 3 4 #"vars"
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 18 #"                  "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 42 #";si t1 es una funcion y t2 es una variable"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 7 #"var-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 22 3 2 #")("
0 0 14 3 26 #"auxiliarUnificacionProcFun"
0 0 4 3 1 #" "
0 0 14 3 7 #"nombre1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 22 3 2 #"))"
0 0 4 3 49 #"                                                 "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 41 #";si t1 es una funcion y t2 es una funcion"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 7 #"fun-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"nombre2"
0 0 4 3 1 #" "
0 0 14 3 4 #"vars"
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"unificacion"
0 0 4 3 1 #" "
0 0 19 3 93
(
 #"\"Error de unificacion. No se puede igualar ~s a la expresion ~s y n"
 #"o son los mismos terminos\""
) 0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 8 #"proc-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"nombre1"
0 0 4 3 1 #" "
0 0 14 3 5 #"vars1"
0 0 4 3 1 #" "
0 0 14 3 7 #"cuerpo1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 18 #"                  "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 47 #";si t1 es un procedimiento y t2 es una variable"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 7 #"var-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 22 3 2 #")("
0 0 14 3 26 #"auxiliarUnificacionProcFun"
0 0 4 3 1 #" "
0 0 14 3 7 #"nombre1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 3 20 #"                    "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 51 #";si t1 es un procedimiento y t2 es un procedimiento"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 8 #"proc-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"nombre2"
0 0 4 3 1 #" "
0 0 14 3 5 #"vars2"
0 0 4 3 1 #" "
0 0 14 3 7 #"cuerpo2"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"unificacion"
0 0 4 3 1 #" "
0 0 19 3 92
(
 #"\"Error de unificacion. No se puede igualar ~s a la expresion ~s y n"
 #"o son los mismo terminos\""
) 0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 7 #"app-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"rator"
0 0 4 3 1 #" "
0 0 14 3 5 #"rands"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 18 #"                  "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 72
(
 #";si t1 es una aplicacion de funcion o procedimiento y t2 es una vari"
 #"able"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 7 #"var-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 24 #"auxiliar-unificacion-app"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 3 20 #"                    "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 85
(
 #";si t1 es una aplicacion de funcion o procedimiento y t2 es una apli"
 #"cacion de funcion"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 7 #"app-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"rator"
0 0 4 3 1 #" "
0 0 14 3 5 #"rands"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 69
(
 #";si t1 es una aplicacion de funcion o procedimiento y t2 es un enter"
 #"o"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 10 #"entero-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"ent2"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 71
(
 #";si t1 es una aplicacion de funcion o procedimiento y t2 es un flota"
 #"nte"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 12 #"flotante-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"flot2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 175
(
 #";si t1 es un valor que retorna la aplicacion de funcion o procedimie"
 #"nto y t2 es un acceso a registro que devuelva un valor que retorna l"
 #"a aplicacion de funcion o procedimiento"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 14 #"asg-record-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"expreg"
0 0 4 3 1 #" "
0 0 14 3 8 #"expcampo"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 157
(
 #";si t1 es un valor que retorna la aplicacion de funcion o procedimie"
 #"nto\302\241 y t2 es un if que devuelve una el valor de la aplicacion"
 #" de funcion o procedimiento"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 6 #"if-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"cond-exp"
0 0 4 3 1 #" "
0 0 14 3 10 #"true-curpo"
0 0 4 3 1 #" "
0 0 14 3 7 #"fin-exp"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 4 3 1 #" "
0 0 17 3 112
(
 #";si t1 es valor es un valor que retorna la aplicacion de funcion o p"
 #"rocedimientouna y t2 es un registro no vacio"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 11 #"record-exp1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"label2"
0 0 4 3 1 #" "
0 0 14 3 5 #"feat2"
0 0 4 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 4 3 1 #" "
0 0 14 3 9 #"features2"
0 0 4 3 1 #" "
0 0 14 3 5 #"exps2"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 97
(
 #";si t1 es un valor que retorna la aplicacion de funcion o procedimie"
 #"nto y t2 es un registro vacio"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 11 #"record-exp2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"label"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 90
(
 #";si t1 es  un valor que retorna la aplicacion de funcion o procedimi"
 #"ento y t2 es una lista"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 8 #"list-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"exp"
0 0 4 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 184
(
 #";si t1 es un valor que retorna la aplicacion de funcion o procedimie"
 #"nto y t2 es una aplicacion de primiiva que devuelve un valor que ret"
 #"orna la aplicacion de funcion o procedimientouna"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 8 #"prim-exp"
0 0 22 3 1 #"("
0 0 14 3 4 #"prim"
0 0 4 3 1 #" "
0 0 14 3 5 #"rands"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"unificacion"
0 0 4 3 1 #" "
0 0 19 3 93
(
 #"\"Error de unificacion. No se puede igualar ~s a la expresion ~s  y "
 #"no son los mismo terminos\""
) 0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 6 #"if-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"cond-exp"
0 0 4 3 1 #" "
0 0 14 3 10 #"true-curpo"
0 0 4 3 1 #" "
0 0 14 3 7 #"fin-exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 18 #"                  "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 45 #";si t1 es un condicional y t2 es una variable"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 7 #"var-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 22 3 2 #")("
0 0 14 3 19 #"auxiliarUnificacion"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 3 20 #"                    "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 47 #";si t1 es un condicional y t2 es un condicional"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 6 #"if-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"cond-exp"
0 0 4 3 1 #" "
0 0 14 3 10 #"true-curpo"
0 0 4 3 1 #" "
0 0 14 3 7 #"fin-exp"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 53 #";si t1 es un condicional y t2 es un acceso a registro"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 14 #"asg-record-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"exp"
0 0 4 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 42 #";si t1 es un condicional y t2 es un entero"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 10 #"entero-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"ent2"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 4 3 1 #" "
0 0 17 3 44 #";si t1 es un condicional y t2 es un flotante"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 12 #"flotante-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"flot2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 53 #";si t1 es un condicional y t2 es un registro no vacio"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 11 #"record-exp1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"label2"
0 0 4 3 1 #" "
0 0 14 3 5 #"feat2"
0 0 4 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 4 3 1 #" "
0 0 14 3 9 #"features2"
0 0 4 3 1 #" "
0 0 14 3 5 #"exps2"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 47 #";si t1 un condicional y t2 es un registro vacio"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 11 #"record-exp2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"label"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 39 #";si t1 un condicional y t2 es una lista"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 8 #"list-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"exp"
0 0 4 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 96
(
 #";si t1 un condicional y t2 es una aplicacion de procedimiento o de f"
 #"uncion que devuelve un valor"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 7 #"app-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"rator"
0 0 4 3 1 #" "
0 0 14 3 5 #"rands"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 78
(
 #";si t1 un condicional y t2 es una aplicacion de primiiva que devuelv"
 #"e un valor"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 8 #"prim-exp"
0 0 22 3 1 #"("
0 0 14 3 4 #"prim"
0 0 4 3 1 #" "
0 0 14 3 5 #"rands"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"unificacion"
0 0 4 3 1 #" "
0 0 19 3 92
(
 #"\"Error de unificacion. No se puede igualar ~s a la expresion ~s y n"
 #"o son los mismo terminos\""
) 0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 4 #"))))"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 7 #"for-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"var"
0 0 4 3 1 #" "
0 0 14 3 7 #"exp-ini"
0 0 4 3 1 #" "
0 0 14 3 7 #"exp-fin"
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 18 #"                  "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 39 #";si t1 es un ciclo y t2 es una variable"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 7 #"var-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 22 3 2 #")("
0 0 14 3 19 #"auxiliarUnificacion"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 22 3 2 #"))"
0 0 4 3 20 #"                    "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 80
(
 #";si t1 es un ciclo y t2 es un ciclo, como los for no retornan algo e"
 #"s decir void"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 88
(
 #";entonces se comparan dos void esto se hace solo para indicar si son"
 #" los mismos terminos"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 58
#";el mismo caso se aplica para aplicacion de procedimientos"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 7 #"for-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"var"
0 0 4 3 1 #" "
0 0 14 3 7 #"exp-ini"
0 0 4 3 1 #" "
0 0 14 3 7 #"exp-fin"
0 0 4 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 3 29 #"                             "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"unificacion"
0 0 4 3 1 #" "
0 0 19 3 92
(
 #"\"Error de unificacion. No se puede igualar ~s a la expresion ~s y n"
 #"o son los mismo terminos\""
) 0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 4 3 7 #"       "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 8 #"prim-exp"
0 0 22 3 1 #"("
0 0 14 3 4 #"prim"
0 0 4 3 1 #" "
0 0 14 3 5 #"rands"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 18 #"                  "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 58
#";si t1 es una aplicacion de primitiva y t2 es una variable"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 7 #"var-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"id"
0 0 22 3 2 #")("
0 0 14 3 19 #"auxiliarUnificacion"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 22 3 2 #"))"
0 0 4 3 20 #"                    "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 73
(
 #";si t1 es una aplicacion de primitiva y t2 es una aplicacion de prim"
 #"itiva"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 8 #"prim-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"prim"
0 0 4 3 1 #" "
0 0 14 3 5 #"rands"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 4 3 1 #" "
0 0 17 3 60
#";si t1 es una aplicacion de primitiva y t2 es un condicional"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 6 #"if-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"cond-exp"
0 0 4 3 1 #" "
0 0 14 3 10 #"true-curpo"
0 0 4 3 1 #" "
0 0 14 3 7 #"fin-exp"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 66
#";si t1 es una aplicacion de primitiva y t2 es un acceso a registro"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 14 #"asg-record-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"exp"
0 0 4 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 55 #";si t1 es una aplicacion de primitiva y t2 es un entero"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 10 #"entero-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"ent2"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 4 3 1 #" "
0 0 17 3 57 #";si t1 es una aplicacion de primitiva y t2 es un flotante"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 12 #"flotante-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"flot2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 109
(
 #";si t1 una aplicacion de primitiva y t2 es una aplicacion de procedi"
 #"miento o de funcion que devuelve un valor"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 7 #"app-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"rator"
0 0 4 3 1 #" "
0 0 14 3 5 #"rands"
0 0 22 3 2 #")("
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"unificacion"
0 0 4 3 1 #" "
0 0 19 3 92
(
 #"\"Error de unificacion. No se puede igualar ~s a la expresion ~s y n"
 #"o son los mismo terminos\""
) 0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 4 #"))))"
0 0 4 3 7 #"       "
0 0 4 29 1 #"\n"
0 0 4 3 26 #"                          "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"unificacion"
0 0 4 3 1 #" "
0 0 19 3 22 #"\"Error de unificacion\""
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 17 3 50 #";unificar-registros: <registro> <registro> -> null"
0 0 4 29 1 #"\n"
0 0 17 3 89
(
 #";funci\303\263n auxiliar que se encarga de unificar los valores de l"
 #"os campos de dos registros."
) 0 0 4 29 1 #"\n"
0 0 17 3 42 #";utiliza la funci\303\263n auxiliar-unificar-reg"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 18 #"unificar-registros"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"reg1"
0 0 4 3 1 #" "
0 0 14 3 4 #"reg2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 8 #"registro"
0 0 4 3 1 #" "
0 0 14 3 4 #"reg1"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 12 #"empty-record"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"label"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 22 #"obtener-posicion-campo"
0 0 4 3 1 #" "
0 0 19 3 27 #"\"El registro ~s es vac\303\255o.\""
0 0 4 3 1 #" "
0 0 14 3 5 #"label"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 10 #"record-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"label1"
0 0 4 3 1 #" "
0 0 14 3 7 #"campos1"
0 0 4 3 1 #" "
0 0 14 3 11 #"posiciones1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 8 #"registro"
0 0 4 3 1 #" "
0 0 14 3 4 #"reg2"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 12 #"empty-record"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"label"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 22 #"obtener-posicion-campo"
0 0 4 3 1 #" "
0 0 19 3 27 #"\"El registro ~s es vac\303\255o.\""
0 0 4 3 1 #" "
0 0 14 3 5 #"label"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 10 #"record-exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"label2"
0 0 4 3 1 #" "
0 0 14 3 7 #"campos2"
0 0 4 3 1 #" "
0 0 14 3 11 #"posiciones2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 14 #"lista-pos-reg1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"vector->list"
0 0 4 3 1 #" "
0 0 14 3 11 #"posiciones1"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 28 #"                            "
0 0 22 3 1 #"("
0 0 14 3 14 #"lista-pos-reg2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"vector->list"
0 0 4 3 1 #" "
0 0 14 3 11 #"posiciones2"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                        "
0 0 22 3 1 #"("
0 0 14 3 21 #"auxiliar-unificar-reg"
0 0 4 3 1 #" "
0 0 14 3 14 #"lista-pos-reg1"
0 0 4 3 1 #" "
0 0 14 3 14 #"lista-pos-reg2"
0 0 22 3 8 #"))))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 73
(
 #";auxiliar-unificar-reg: <list-of-posiciones> <list-of-posiciones> ->"
 #" null"
) 0 0 4 29 1 #"\n"
0 0 17 3 130
(
 #";funcion auxiliar a unificar-registros que se encarga de recorrer lo"
 #"s campos de cada registro en orden y va unificando sus valores"
) 0 0 4 29 1 #"\n"
0 0 17 3 133
(
 #"; con ayuda de la funcion  unificacion-valores-de-a-var. Solo se tom"
 #"o unificaci\303\263n de campos con el mismo nombre y en el mismo ord"
 #"en."
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 21 #"auxiliar-unificar-reg"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"posiciones1"
0 0 4 3 1 #" "
0 0 14 3 11 #"posiciones2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 8 #"variable"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 11 #"posiciones1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 26 #"                          "
0 0 22 3 1 #"("
0 0 14 3 5 #"a-var"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pos1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 33 #"                                 "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 8 #"variable"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 11 #"posiciones2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 35 #"                                   "
0 0 22 3 1 #"("
0 0 14 3 5 #"a-var"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pos2"
0 0 22 3 1 #")"
0 0 4 3 22 #"                      "
0 0 4 29 1 #"\n"
0 0 4 3 42 #"                                          "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 11 #"posiciones1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 3 31 #"                               "
0 0 4 29 1 #"\n"
0 0 4 3 46 #"                                              "
0 0 22 3 1 #"("
0 0 14 3 28 #"unificacion-valores-de-a-var"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"apply-store"
0 0 4 3 1 #" "
0 0 14 3 4 #"pos1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"apply-store"
0 0 4 3 1 #" "
0 0 14 3 4 #"pos2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 4 #"pos1"
0 0 4 3 1 #" "
0 0 14 3 4 #"pos2"
0 0 22 3 1 #")"
0 0 4 3 25 #"                         "
0 0 4 29 1 #"\n"
0 0 4 3 46 #"                                              "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 3 46 #"                                              "
0 0 4 29 1 #"\n"
0 0 4 3 48 #"                                                "
0 0 22 3 1 #"("
0 0 14 3 28 #"unificacion-valores-de-a-var"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"apply-store"
0 0 4 3 1 #" "
0 0 14 3 4 #"pos1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"apply-store"
0 0 4 3 1 #" "
0 0 14 3 4 #"pos2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 4 #"pos1"
0 0 4 3 1 #" "
0 0 14 3 4 #"pos2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 48 #"                                                "
0 0 22 3 1 #"("
0 0 14 3 21 #"auxiliar-unificar-reg"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 11 #"posiciones1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 11 #"posiciones2"
0 0 22 3 10 #"))))))))))"
0 0 4 29 1 #"\n"
0 0 4 3 48 #"                                                "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 48 #"                                                "
0 0 4 29 1 #"\n"
0 0 17 3 86
(
 #";unificacion-valores-de-a-var: <scheme-value> <scheme-value> <entero"
 #"> <entero> -> null"
) 0 0 4 29 1 #"\n"
0 0 17 3 95
(
 #";funcion de unificaci\303\263n que se cre\303\263 especialmente para"
 #" unificar valores de campos de registro"
) 0 0 4 29 1 #"\n"
0 0 17 3 120
(
 #";Esto porque los valores de los campos llegan como valores a los que"
 #" apunta (a-var pos) y no son expresiones en sintaxis"
) 0 0 4 29 1 #"\n"
0 0 17 3 50 #";abstracta, lo cual es lo que recibe unificaci\303\263n."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 28 #"unificacion-valores-de-a-var"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"valor1"
0 0 4 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 4 3 1 #" "
0 0 14 3 4 #"pos1"
0 0 4 3 1 #" "
0 0 14 3 4 #"pos2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 3 #"and"
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 2 #")("
0 0 14 3 3 #"not"
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 9 #"set-store"
0 0 4 3 1 #" "
0 0 14 3 4 #"pos1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"a-var"
0 0 4 3 1 #" "
0 0 14 3 4 #"pos2"
0 0 22 3 3 #")))"
0 0 4 3 9 #"         "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 3 #"and"
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 2 #")("
0 0 14 3 3 #"not"
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 9 #"set-store"
0 0 4 3 1 #" "
0 0 14 3 4 #"pos2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"a-var"
0 0 4 3 1 #" "
0 0 14 3 4 #"pos1"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 12 #"extend-store"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 9 #"set-store"
0 0 4 3 1 #" "
0 0 14 3 4 #"pos2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"a-var"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"store-size"
0 0 22 3 1 #")"
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 9 #"set-store"
0 0 4 3 1 #" "
0 0 14 3 4 #"pos1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"a-var"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"store-size"
0 0 22 3 1 #")"
0 0 20 3 1 #"1"
0 0 22 3 4 #"))))"
0 0 4 3 8 #"        "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"registro?"
0 0 4 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"registro?"
0 0 4 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 32 #"registros-iguales-para-unificar?"
0 0 4 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 4 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 18 #"unificar-registros"
0 0 4 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 4 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 4 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 12 #"extend-store"
0 0 4 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 9 #"set-store"
0 0 4 3 1 #" "
0 0 14 3 4 #"pos2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"a-var"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"store-size"
0 0 22 3 1 #")"
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 9 #"set-store"
0 0 4 3 1 #" "
0 0 14 3 4 #"pos1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"a-var"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"store-size"
0 0 22 3 1 #")"
0 0 20 3 1 #"1"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"unificacion"
0 0 4 3 1 #" "
0 0 19 3 23 #"\"Error de unificacion.\""
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 4 29 1 #"\n"
0 0 17 3 60
#";auxiliarUnificacion: <termino> <symbol> <ambiente> -> null "
0 0 4 29 1 #"\n"
0 0 17 3 97
(
 #";funcion auxiliar a unificaci\303\263n reliza la unificacion de dos "
 #"terminos, donde t1 es una variable "
) 0 0 4 29 1 #"\n"
0 0 17 3 2 #";y"
0 0 17 3 1 #" "
0 0 17 3 2 #"t2"
0 0 17 3 1 #" "
0 0 17 3 2 #"es"
0 0 17 3 1 #" "
0 0 17 3 10 #"cualquier "
0 0 17 3 4 #"otro"
0 0 17 3 1 #" "
0 0 17 3 7 #"termino"
0 0 17 3 4 #" que"
0 0 17 3 1 #" "
0 0 17 3 2 #"no"
0 0 17 3 1 #" "
0 0 17 3 3 #"sea"
0 0 17 3 5 #" otra"
0 0 17 3 1 #" "
0 0 17 3 8 #"variable"
0 0 17 3 12 #" y viceversa"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 19 #"auxiliarUnificacion"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 10 #"valornuevo"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"eval-expression"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 10 #"vlrdirecto"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"apply-store-valor-directo"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 9 #"apply-env"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 31 #"                               "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 10 #"vlrdirecto"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 35 #"                                   "
0 0 22 3 1 #"("
0 0 14 3 9 #"set-store"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 9 #"apply-env"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 10 #"valornuevo"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 35 #"                                   "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"variable?"
0 0 4 3 1 #" "
0 0 14 3 10 #"vlrdirecto"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 39 #"                                       "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 8 #"variable"
0 0 4 3 1 #" "
0 0 14 3 10 #"vlrdirecto"
0 0 4 29 1 #"\n"
0 0 4 3 41 #"                                         "
0 0 22 3 1 #"("
0 0 14 3 5 #"a-var"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"pos"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 48 #"                                                "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"apply-store"
0 0 4 3 2 #"  "
0 0 14 3 3 #"pos"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 49 #"                                                 "
0 0 22 3 1 #"("
0 0 14 3 9 #"set-store"
0 0 4 3 2 #"  "
0 0 14 3 3 #"pos"
0 0 4 3 1 #" "
0 0 14 3 10 #"valornuevo"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 49 #"                                                 "
0 0 17 3 73
(
 #";el valor en el store no es _ pero si es un (a-var pos) que apunta a"
 #" un _"
) 0 0 4 29 1 #"\n"
0 0 4 3 49 #"                                                 "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"unificacion"
0 0 4 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Error"
0 0 19 3 1 #" "
0 0 19 3 2 #"de"
0 0 19 3 55 #" unificacion: La variable ~s ya se encuentra asignada.\""
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 49 #"                                                 "
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 39 #"                                       "
0 0 17 3 44 #";el valor en el store no es _ ni (a-var pos)"
0 0 4 29 1 #"\n"
0 0 4 3 39 #"                                       "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"unificacion"
0 0 4 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Error"
0 0 19 3 1 #" "
0 0 19 3 2 #"de"
0 0 19 3 55 #" unificacion: La variable ~s ya se encuentra asignada.\""
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 76
(
 #";auxiliarUnificacionProcFun: <nombre> <termino> <symbol> <ambiente> "
 #"-> null "
) 0 0 4 29 1 #"\n"
0 0 17 3 102
(
 #";funcion auxiliar a unificaci\303\263n reliza la unificacion de dos "
 #"terminos, donde t1 es una variable y t2 "
) 0 0 4 29 1 #"\n"
0 0 17 3 3 #";es"
0 0 17 3 1 #" "
0 0 17 3 2 #"un"
0 0 17 3 1 #" "
0 0 17 3 13 #"procedimiento"
0 0 17 3 1 #" "
0 0 17 3 1 #"o"
0 0 17 3 1 #" "
0 0 17 3 7 #"funcion"
0 0 17 3 12 #" y viceversa"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 26 #"auxiliarUnificacionProcFun"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"nombre"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 10 #"vlrdirecto"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"apply-store-valor-directo"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 9 #"apply-env"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 7 #"closure"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"eval-expression"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 4 #"nomb"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"eval-nombre-proc"
0 0 4 3 1 #" "
0 0 14 3 6 #"nombre"
0 0 22 3 3 #")))"
0 0 17 3 61
#";nomb puede ser \"$\" o una variable ya guardada en el ambiente"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 4 #"nomb"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"$\""
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 10 #"vlrdirecto"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 9 #"set-store"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 9 #"apply-env"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 7 #"closure"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"variable?"
0 0 4 3 1 #" "
0 0 14 3 10 #"vlrdirecto"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 8 #"variable"
0 0 4 3 1 #" "
0 0 14 3 10 #"vlrdirecto"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 5 #"a-var"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"pos"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 27 #"                           "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"apply-store"
0 0 4 3 2 #"  "
0 0 14 3 3 #"pos"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 31 #"                               "
0 0 22 3 1 #"("
0 0 14 3 9 #"set-store"
0 0 4 3 2 #"  "
0 0 14 3 3 #"pos"
0 0 4 3 1 #" "
0 0 14 3 7 #"closure"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 31 #"                               "
0 0 17 3 73
(
 #";el valor en el store no es _ pero si es un (a-var pos) que apunta a"
 #" un _"
) 0 0 4 29 1 #"\n"
0 0 4 3 31 #"                               "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"unificacion"
0 0 4 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Error"
0 0 19 3 1 #" "
0 0 19 3 2 #"de"
0 0 19 3 55 #" unificacion: La variable ~s ya se encuentra asignada.\""
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 31 #"                               "
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 17 3 44 #";el valor en el store no es _ ni (a-var pos)"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"unificacion"
0 0 4 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Error"
0 0 19 3 1 #" "
0 0 19 3 2 #"de"
0 0 19 3 55 #" unificacion: La variable ~s ya se encuentra asignada.\""
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 10 #"vlrdirecto"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 9 #"set-store"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 9 #"apply-env"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"apply-store"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 9 #"apply-env"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 14 3 4 #"nomb"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"variable?"
0 0 4 3 1 #" "
0 0 14 3 10 #"vlrdirecto"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 8 #"variable"
0 0 4 3 1 #" "
0 0 14 3 10 #"vlrdirecto"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 5 #"a-var"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"pos"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 27 #"                           "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"apply-store"
0 0 4 3 2 #"  "
0 0 14 3 3 #"pos"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 31 #"                               "
0 0 22 3 1 #"("
0 0 14 3 9 #"set-store"
0 0 4 3 2 #"  "
0 0 14 3 3 #"pos"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"apply-store"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 9 #"apply-env"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 14 3 4 #"nomb"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 31 #"                               "
0 0 17 3 73
(
 #";el valor en el store no es _ pero si es un (a-var pos) que apunta a"
 #" un _"
) 0 0 4 29 1 #"\n"
0 0 4 3 31 #"                               "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"unificacion"
0 0 4 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Error"
0 0 19 3 1 #" "
0 0 19 3 2 #"de"
0 0 19 3 55 #" unificacion: La variable ~s ya se encuentra asignada.\""
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 31 #"                               "
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 17 3 44 #";el valor en el store no es _ ni (a-var pos)"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"unificacion"
0 0 4 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Error"
0 0 19 3 1 #" "
0 0 19 3 2 #"de"
0 0 19 3 55 #" unificacion: La variable ~s ya se encuentra asignada.\""
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 22 3 7 #")))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 66
#";auxiliar-unificacion-app:  <termino> <symbol> <ambiente> -> null "
0 0 4 29 1 #"\n"
0 0 17 3 102
(
 #";funcion auxiliar a unificaci\303\263n reliza la unificacion de dos "
 #"terminos, donde t1 es una variable y t2 "
) 0 0 4 29 1 #"\n"
0 0 17 3 3 #";es"
0 0 17 3 1 #" "
0 0 17 3 18 #"una aplicacion de "
0 0 17 3 13 #"procedimiento"
0 0 17 3 1 #" "
0 0 17 3 1 #"o"
0 0 17 3 20 #" funcion y viceversa"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 24 #"auxiliar-unificacion-app"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 10 #"vlrdirecto"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"apply-store-valor-directo"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 9 #"apply-env"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 3 #"app"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"eval-expression"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 22 3 3 #")))"
0 0 4 3 25 #"                         "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 3 #"app"
0 0 4 3 1 #" "
0 0 14 3 4 #"void"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 10 #"vlrdirecto"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 9 #"set-store"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 9 #"apply-env"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"app"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"variable?"
0 0 4 3 1 #" "
0 0 14 3 10 #"vlrdirecto"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 15 3 5 #"cases"
0 0 4 3 1 #" "
0 0 14 3 8 #"variable"
0 0 4 3 1 #" "
0 0 14 3 10 #"vlrdirecto"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 5 #"a-var"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"pos"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 27 #"                           "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"apply-store"
0 0 4 3 2 #"  "
0 0 14 3 3 #"pos"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 11 #"var-no-asig"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 31 #"                               "
0 0 22 3 1 #"("
0 0 14 3 9 #"set-store"
0 0 4 3 2 #"  "
0 0 14 3 3 #"pos"
0 0 4 3 1 #" "
0 0 14 3 3 #"app"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 31 #"                               "
0 0 17 3 73
(
 #";el valor en el store no es _ pero si es un (a-var pos) que apunta a"
 #" un _"
) 0 0 4 29 1 #"\n"
0 0 4 3 31 #"                               "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"unificacion"
0 0 4 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Error"
0 0 19 3 1 #" "
0 0 19 3 2 #"de"
0 0 19 3 55 #" unificacion: La variable ~s ya se encuentra asignada.\""
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 31 #"                               "
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 17 3 44 #";el valor en el store no es _ ni (a-var pos)"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"unificacion"
0 0 4 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Error"
0 0 19 3 1 #" "
0 0 19 3 2 #"de"
0 0 19 3 55 #" unificacion: La variable ~s ya se encuentra asignada.\""
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"unificacion"
0 0 4 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Error"
0 0 19 3 1 #" "
0 0 19 3 2 #"de"
0 0 19 3 1 #" "
0 0 19 3 12 #"unificacion:"
0 0 19 3 1 #" "
0 0 19 3 2 #"No"
0 0 19 3 1 #" "
0 0 19 3 2 #"se"
0 0 19 3 1 #" "
0 0 19 3 5 #"puede"
0 0 19 3 1 #" "
0 0 19 3 7 #"asignar"
0 0 19 3 1 #" "
0 0 19 3 3 #"una"
0 0 19 3 1 #" "
0 0 19 3 10 #"aplicacion"
0 0 19 3 1 #" "
0 0 19 3 2 #"de"
0 0 19 3 1 #" "
0 0 19 3 13 #"procedimiento"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 2 #"~s"
0 0 19 3 1 #" "
0 0 19 3 6 #"porque"
0 0 19 3 54 #" la aplicacion de procedimiento no devuelve un valor.\""
0 0 4 3 1 #" "
0 0 14 3 2 #"id"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 68
#";iguales-terminos?:  <termino> <termino> <ambiente> -> <void> |null "
0 0 4 29 1 #"\n"
0 0 17 3 111
(
 #";funcion auxiliar a unificaci\303\263n que determina si dos terminos"
 #" son iguales y si lo son devuelve void sino error"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 17 #"iguales-terminos?"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 4 #"vlr1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"eval-expression"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 4 #"vlr2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"eval-expression"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 14 3 3 #"env"
0 0 4 3 1 #" "
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 17 3 37 #";si t1 y t2 son o no el mismo termino"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 4 #"vlr1"
0 0 4 3 1 #" "
0 0 14 3 4 #"vlr2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 4 #"void"
0 0 22 3 1 #")"
0 0 4 3 35 #"                                   "
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 10 #"eopl:error"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 17 #"iguales-terminos?"
0 0 4 3 1 #" "
0 0 19 3 58
#"\"Error de unificacion. ~s y ~s no son los mismos terminos\""
0 0 4 3 1 #" "
0 0 14 3 4 #"vlr1"
0 0 4 3 1 #" "
0 0 14 3 4 #"vlr2"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 17 3 92
(
 #";*******************************************************************"
 #"************************"
) 0 0 4 29 1 #"\n"
0 0 17 3 27 #";Otras Funciones Auxiliares"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 65
(
 #"; funciones auxiliares para encontrar la posici\303\263n de un s\303"
 #"\255mbolo"
) 0 0 4 29 1 #"\n"
0 0 17 3 40 #"; en la lista de s\303\255mbolos de unambiente"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 18 #"list-find-position"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"sym"
0 0 4 3 1 #" "
0 0 14 3 3 #"los"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 10 #"list-index"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sym1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 4 #"sym1"
0 0 4 3 1 #" "
0 0 14 3 3 #"sym"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 3 #"los"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 10 #"list-index"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pred"
0 0 4 3 1 #" "
0 0 14 3 2 #"ls"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 14 3 2 #"ls"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 4 #"pred"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 2 #"ls"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 12 #"list-index-r"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"list-index"
0 0 4 3 1 #" "
0 0 14 3 4 #"pred"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 2 #"ls"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"number?"
0 0 4 3 1 #" "
0 0 14 3 12 #"list-index-r"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 12 #"list-index-r"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 20 3 2 #"#f"
0 0 22 3 6 #"))))))"
0 0 17 3 32 #";AQUI LLEGA POS DE OBTENER VALOR"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 71
(
 #";construir-lista-posiciones: <integer> <integer> -> <list-for-intege"
 #"rs>"
) 0 0 4 29 1 #"\n"
0 0 17 3 59
#";Retorna un listado con los numeros desde inicio hasta fin "
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 23 #"construir-lista-numeros"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"inico"
0 0 4 3 1 #" "
0 0 14 3 3 #"fin"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 14 3 4 #"loop"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 4 #"next"
0 0 4 3 1 #" "
0 0 14 3 5 #"inico"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #">"
0 0 4 3 1 #" "
0 0 14 3 4 #"next"
0 0 4 3 1 #" "
0 0 14 3 3 #"fin"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 2 #"()"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 14 3 4 #"next"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"loop"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 14 3 4 #"next"
0 0 22 3 7 #")))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 92
(
 #";*******************************************************************"
 #"************************"
) 0 0 4 29 1 #"\n"
0 0 17 3 9 #";;Pruebas"
0 0 4 29 1 #"\n"
0 0 14 3 10 #"str-global"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 18 #"show-the-datatypes"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 14 3 9 #"just-scan"
0 0 4 29 1 #"\n"
0 0 14 3 10 #"scan&parse"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 9 #"just-scan"
0 0 4 3 1 #" "
0 0 19 3 12 #"\"+{2 5 7 9}\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 9 #"just-scan"
0 0 4 3 1 #" "
0 0 19 3 29 #"\"+{2 5 7 9}%pruebacomentario\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 9 #"just-scan"
0 0 4 3 1 #" "
0 0 19 3 42 #"\"+{2 5       7 9     }%pruebacomentario 8\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 4 3 1 #" "
0 0 19 3 12 #"\"+{2 5 7 9}\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 4 3 1 #" "
0 0 19 3 29 #"\"+{2 5 7 9}%pruebacomentario\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 4 3 1 #" "
0 0 19 3 42 #"\"+{2 5       7 9     }%pruebacomentario 8\""
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 34 #";;Pruebas para extend-store-varios"
0 0 4 29 1 #"\n"
0 0 17 3 52 #";(define nuevo-store (extend-store-varios #(2 4 5)))"
0 0 4 29 1 #"\n"
0 0 17 3 18 #";(car nuevo-store)"
0 0 4 29 1 #"\n"
0 0 17 3 18 #";(cdr nuevo-store)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 29 #";;Pruebas en el interpretador"
0 0 4 29 1 #"\n"
0 0 17 3 16 #";(interpretador)"
0 0 4 29 1 #"\n"
0 7       16537 4           0 0           0 2755 0 2 29 1 #"\n"
0 0 17 3 8 #";;Cuerpo"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 20 3 1 #"3"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 11 #";;Variables"
0 0 2 29 1 #"\n"
0 0 14 3 1 #"X"
0 0 2 29 1 #"\n"
0 0 14 3 1 #"Y"
0 0 2 29 1 #"\n"
0 0 14 3 1 #"M"
0 0 2 29 1 #"\n"
0 0 14 3 8 #"Variable"
0 0 2 29 1 #"\n"
0 0 14 3 6 #"Prueba"
0 0 2 29 1 #"\n"
0 0 14 3 1 #"_"
0 0 2 29 1 #"\n"
0 0 17 3 31 #";;Creacion de variables locales"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"M"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 1 #"C"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 12 #";;Asignacion"
0 0 2 29 1 #"\n"
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"X=8"
0 0 2 29 1 #"\n"
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"8=X"
0 0 2 29 1 #"\n"
0 0 17 3 33 #";mas pruebas abajo en unificacion"
0 0 2 29 1 #"\n"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 17 3 9 #";;Numeros"
0 0 2 29 1 #"\n"
0 0 14 3 3 #"~87"
0 0 2 29 1 #"\n"
0 0 20 3 3 #"4.5"
0 0 2 29 1 #"\n"
0 0 20 3 1 #"3"
0 0 2 29 1 #"\n"
0 0 17 3 61
#";;Registros (debe devolver el registro en sintaxis abstracta)"
0 0 2 29 1 #"\n"
0 0 14 3 5 #"mireg"
0 0 2 29 1 #"\n"
0 0 14 3 5 #"mireg"
0 0 22 3 1 #"("
0 0 14 3 8 #"campo1:3"
0 0 2 3 1 #" "
0 0 14 3 8 #"campo2:4"
0 0 2 3 1 #" "
0 0 14 3 9 #"campo3:90"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 14 3 5 #"mireg"
0 0 22 3 1 #"("
0 0 14 3 3 #"1:3"
0 0 2 3 1 #" "
0 0 14 3 3 #"2:4"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 14 3 5 #"mireg"
0 0 22 3 1 #"("
0 0 14 3 3 #"1:X"
0 0 2 3 1 #" "
0 0 14 3 3 #"2:4"
0 0 2 3 1 #" "
0 0 14 3 3 #"3:Y"
0 0 2 3 1 #" "
0 0 14 3 3 #"4:9"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 71
(
 #";;Procedimientos (debe devolver en sintaxis abstracta el procedimien"
 #"to)"
) 0 0 2 29 1 #"\n"
0 0 17 3 49 #";$ es el nombre del procedimiento, X es parametro"
0 0 2 29 1 #"\n"
0 0 14 3 4 #"proc"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"$"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 17 3 33 #";$ es el nombre del procedimiento"
0 0 2 29 1 #"\n"
0 0 14 3 4 #"proc"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"$"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 17 3 62
#";Variable es el nombre del procedimiento, X y Y son parametros"
0 0 2 29 1 #"\n"
0 0 14 3 4 #"proc"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 8 #"Variable"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 17 3 29 #";$ es el nombre de la funcion"
0 0 2 29 1 #"\n"
0 0 14 3 3 #"fun"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"$"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #"}"
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 17 3 45 #";Y es el nombre de la funcion, X es parametro"
0 0 2 29 1 #"\n"
0 0 14 3 3 #"fun"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #"}"
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 56 #";Error porque nombre es un atomo y debe ser una variable"
0 0 2 29 1 #"\n"
0 0 14 3 4 #"proc"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 5 #"proc1"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 48 #";Error porque la varible Fun1 no ha sido creada "
0 0 2 29 1 #"\n"
0 0 14 3 3 #"fun"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 4 #"Fun1"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #"}"
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 30 #";;Aplicacion de Procedimientos"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"fun"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 2 #"=+"
0 0 22 3 1 #"{"
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #"}"
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"fun"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #">"
0 0 22 3 1 #"{"
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #"}"
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 4 #"proc"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 2 #"=+"
0 0 22 3 1 #"{"
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #"}"
0 0 14 3 3 #"end"
0 0 2 3 2 #"  "
0 0 17 3 54 #";;devuelve void y no puede ser asignado a una variable"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 1 #"U"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"fun"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"$"
0 0 2 3 1 #" "
0 0 14 3 1 #"T"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"*"
0 0 22 3 1 #"{"
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 14 3 1 #"T"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 22 3 1 #"{"
0 0 14 3 3 #"fun"
0 0 22 3 1 #"{"
0 0 14 3 1 #"$"
0 0 2 3 1 #" "
0 0 14 3 1 #"N"
0 0 22 3 1 #"}"
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 14 3 1 #"N"
0 0 2 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #"}"
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #"}"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"{"
0 0 14 3 4 #"proc"
0 0 22 3 1 #"{"
0 0 14 3 1 #"$"
0 0 2 3 1 #" "
0 0 14 3 1 #"N"
0 0 22 3 1 #"}"
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 14 3 1 #"N"
0 0 2 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #"}"
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"Y=1"
0 0 2 3 1 #" "
0 0 14 3 3 #"fun"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 1 #"I"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 14 3 1 #"I"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 15 #";;Condicionales"
0 0 2 29 1 #"\n"
0 0 14 3 2 #"if"
0 0 2 3 1 #" "
0 0 14 3 4 #"true"
0 0 2 3 1 #" "
0 0 14 3 4 #"then"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 2 3 1 #" "
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 20 3 1 #"6"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 14 3 2 #"if"
0 0 2 3 1 #" "
0 0 14 3 2 #">="
0 0 22 3 1 #"{"
0 0 20 3 1 #"6"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 4 #"then"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 2 3 1 #" "
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 20 3 1 #"6"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 14 3 2 #"if"
0 0 2 3 1 #" "
0 0 14 3 2 #">="
0 0 22 3 1 #"{"
0 0 20 3 1 #"4"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 4 #"then"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 2 3 1 #" "
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 20 3 1 #"6"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 14 3 2 #"if"
0 0 2 3 1 #" "
0 0 14 3 2 #">="
0 0 22 3 1 #"{"
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 4 #"then"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 17 3 8 #";;Ciclos"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 15 3 3 #"for"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 2 3 1 #" "
0 0 14 3 2 #".."
0 0 2 3 1 #" "
0 0 20 3 2 #"10"
0 0 2 3 1 #" "
0 0 15 3 2 #"do"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"5"
0 0 2 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 12 #";;Especiales"
0 0 2 29 1 #"\n"
0 0 14 3 4 #"skip"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 14 3 2 #"if"
0 0 2 3 1 #" "
0 0 14 3 5 #"false"
0 0 2 3 1 #" "
0 0 14 3 4 #"then"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 14 3 4 #"skip"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 17 3 12 #";;Primitivas"
0 0 2 29 1 #"\n"
0 0 17 3 28 #";Operaciones sobre variables"
0 0 2 29 1 #"\n"
0 0 14 3 6 #"isdet?"
0 0 22 3 1 #"{"
0 0 14 3 1 #"X"
0 0 22 3 1 #"}"
0 0 2 29 1 #"\n"
0 0 14 3 7 #"isfree?"
0 0 22 3 1 #"{"
0 0 14 3 1 #"X"
0 0 22 3 1 #"}"
0 0 2 29 1 #"\n"
0 0 14 3 6 #"isdet?"
0 0 22 3 1 #"{"
0 0 20 3 1 #"9"
0 0 22 3 1 #"}"
0 0 2 29 1 #"\n"
0 0 14 3 7 #"isfree?"
0 0 22 3 1 #"{"
0 0 20 3 1 #"9"
0 0 22 3 1 #"}"
0 0 2 29 1 #"\n"
0 0 17 3 24 #";Operaciones aritmeticas"
0 0 2 29 1 #"\n"
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 2 3 1 #" "
0 0 20 3 1 #"7"
0 0 2 3 1 #" "
0 0 20 3 1 #"9"
0 0 22 3 1 #"}"
0 0 2 29 1 #"\n"
0 0 14 3 1 #"*"
0 0 22 3 1 #"{"
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 20 3 1 #"3"
0 0 2 3 1 #" "
0 0 14 3 2 #"~2"
0 0 22 3 1 #"}"
0 0 2 29 1 #"\n"
0 0 14 3 1 #"*"
0 0 22 3 1 #"{"
0 0 20 3 1 #"2"
0 0 22 3 1 #"}"
0 0 2 29 1 #"\n"
0 0 14 3 1 #"/"
0 0 22 3 1 #"{"
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 20 3 1 #"3"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #"}"
0 0 2 29 1 #"\n"
0 0 14 3 1 #"/"
0 0 22 3 1 #"{"
0 0 20 3 2 #"10"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #"}"
0 0 2 29 1 #"\n"
0 0 14 3 1 #"-"
0 0 22 3 1 #"{"
0 0 20 3 2 #"18"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"9"
0 0 22 3 1 #"}"
0 0 2 29 1 #"\n"
0 0 14 3 1 #"-"
0 0 22 3 1 #"{"
0 0 20 3 2 #"18"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #"}"
0 0 2 29 1 #"\n"
0 0 17 3 12 #";Comparacion"
0 0 2 29 1 #"\n"
0 0 14 3 1 #">"
0 0 22 3 1 #"{"
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #"}"
0 0 2 29 1 #"\n"
0 0 14 3 1 #">"
0 0 22 3 1 #"{"
0 0 20 3 1 #"9"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #"}"
0 0 2 29 1 #"\n"
0 0 14 3 2 #">="
0 0 22 3 1 #"{"
0 0 20 3 1 #"4"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #"}"
0 0 2 29 1 #"\n"
0 0 14 3 2 #"=="
0 0 22 3 1 #"{"
0 0 20 3 1 #"5"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"3"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 2 #"}}"
0 0 2 29 1 #"\n"
0 0 14 3 2 #">="
0 0 22 3 1 #"{"
0 0 20 3 1 #"5"
0 0 2 3 1 #" "
0 0 14 3 2 #"~5"
0 0 22 3 1 #"}"
0 0 2 29 1 #"\n"
0 0 14 3 1 #"<"
0 0 22 3 1 #"{"
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #"}"
0 0 2 29 1 #"\n"
0 0 14 3 1 #"<"
0 0 22 3 1 #"{"
0 0 20 3 2 #"10"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #"}"
0 0 2 29 1 #"\n"
0 0 14 3 2 #"=<"
0 0 22 3 1 #"{"
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #"}"
0 0 2 29 1 #"\n"
0 0 14 3 2 #"=<"
0 0 22 3 1 #"{"
0 0 20 3 1 #"5"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #"}"
0 0 2 29 1 #"\n"
0 0 14 3 2 #"=="
0 0 22 3 1 #"{"
0 0 20 3 1 #"3"
0 0 2 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #"}"
0 0 2 29 1 #"\n"
0 0 14 3 2 #"=="
0 0 22 3 1 #"{"
0 0 20 3 1 #"3"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #"}"
0 0 2 29 1 #"\n"
0 0 17 3 8 #";Logicas"
0 0 2 29 1 #"\n"
0 0 14 3 6 #"orelse"
0 0 22 3 1 #"{"
0 0 14 3 1 #">"
0 0 22 3 1 #"{"
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #">"
0 0 22 3 1 #"{"
0 0 20 3 1 #"9"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #"}}"
0 0 2 29 1 #"\n"
0 0 14 3 6 #"orelse"
0 0 22 3 1 #"{"
0 0 14 3 1 #">"
0 0 22 3 1 #"{"
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"<"
0 0 22 3 1 #"{"
0 0 20 3 1 #"9"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #"}}"
0 0 2 29 1 #"\n"
0 0 14 3 7 #"andthen"
0 0 22 3 1 #"{"
0 0 14 3 1 #">"
0 0 22 3 1 #"{"
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"<"
0 0 22 3 1 #"{"
0 0 20 3 1 #"9"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #"}}"
0 0 2 29 1 #"\n"
0 0 14 3 7 #"andthen"
0 0 22 3 1 #"{"
0 0 14 3 1 #">"
0 0 22 3 1 #"{"
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #">"
0 0 22 3 1 #"{"
0 0 20 3 1 #"9"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #"}}"
0 0 2 29 1 #"\n"
0 0 17 3 54
#";Unificacion (funciona con el algotimo de unificaci\303\263n"
0 0 2 29 1 #"\n"
0 0 14 3 1 #"="
0 0 22 3 1 #"{"
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #"}"
0 0 2 29 1 #"\n"
0 0 14 3 1 #"="
0 0 22 3 1 #"{"
0 0 20 3 1 #"3"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #"}"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 1 #"="
0 0 22 3 1 #"{"
0 0 20 3 1 #"8"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 35 #";;;;;;;;; Algoritmo de Unificacion "
0 0 2 29 1 #"\n"
0 0 17 3 7 #";Notas:"
0 0 2 29 1 #"\n"
0 0 17 3 10 #";*variable"
0 0 17 3 1 #" "
0 0 17 3 2 #"no"
0 0 17 3 1 #" "
0 0 17 3 17 #"asignada=variable"
0 0 17 3 1 #" "
0 0 17 3 3 #"con"
0 0 17 3 1 #" "
0 0 17 3 5 #"valor"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"_"
0 0 17 3 1 #" "
0 0 17 3 2 #"en"
0 0 17 3 1 #" "
0 0 17 3 2 #"el"
0 0 17 3 1 #" "
0 0 17 3 5 #"store"
0 0 17 3 39 #" o con (a-var posapuntaavalor'_enstore)"
0 0 2 29 1 #"\n"
0 0 17 3 155
(
 #";*dado que existe una gran combinacion de casos que se puede dar, ex"
 #"plicado en el informe, aqui se presentan algunos ejemplos representa"
 #"tivos del algoritmo"
) 0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 72
(
 #";si t1 y t2 son el mismo termino, donde termino es una variable asig"
 #"nada"
) 0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"X=X"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 64
#";si t1 es una variable no asignada y t2 es una variable asignada"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"Z=X"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 67
#";si t1 es una variable ya asignada y t2 es una variable no asignada"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"X=Z"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 67
#";si t1 es una variable ya asignada y t2 es una variable no asignada"
0 0 2 29 1 #"\n"
0 0 17 3 65
#";y luego se quiere modificar el valor de una variable ya asignada"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"X=Z"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"Z=5"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 143
(
 #";si los dos terminos son variables no asignadas, entonces se convier"
 #"ten en la misma variable, con sus (a-var pos) apuntando a la misma p"
 #"osicion"
) 0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"Y=Z"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"Y=Z"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"Y=2"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 48 #";si los dos terminos son variables ya asignadas "
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"Z=8"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"X=Z"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 17 3 63
#";si t1 es una variable no asignada y t2 un entero. Y viceversa."
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"Z=4"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"M=8"
0 0 2 3 1 #" "
0 0 14 3 1 #"M"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"4=Z"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"8=M"
0 0 2 3 1 #" "
0 0 14 3 1 #"M"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 63
#";si t1 es una variable ya asignada y t2 un entero. Y viceversa."
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"X=2"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"X=2"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 17 3 60
#";local X es una variable diferente a la del ambiente inicial"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"2=X"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"2=X"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 17 3 60
#";local X es una variable diferente a la del ambiente inicial"
0 0 2 29 1 #"\n"
0 0 17 3 60
#";si t1 y t2 son el mismo termino, donde termino es un entero"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"Z=3"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"3=3"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 63
#";si t1 y t2 no son el mismo termino, donde termino es un entero"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"Z=3"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"3=4"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 77
(
 #";si t1 es un entero y t2 una expresion a la que no se puede igualar "
 #"un entero"
) 0 0 2 29 1 #"\n"
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 12 #"3=miregistro"
0 0 22 3 1 #"("
0 0 14 3 8 #"campo1:X"
0 0 2 3 1 #" "
0 0 14 3 8 #"campo2:4"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 17 3 65
#";si t1 es una variable no asignada y t2 un flotante. Y viceversa."
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 5 #"Z=2.9"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 5 #"2.9=Z"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"Y=Z"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 5 #"Z=2.5"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 17 3 43 #";t1 y t2 se convierten en la misma variable"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 1 #"="
0 0 22 3 1 #"{"
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 5 #"Z=2.5"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 17 3 43 #";t1 y t2 se convierten en la misma variable"
0 0 2 29 1 #"\n"
0 0 17 3 66
#";si t1 es una variable ya asignada y t2 un flotante. Y viceversa. "
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 5 #"X=5.4"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 6 #"      "
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 5 #"5.4=X"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 62
#";si t1 y t2 son el mismo termino, donde termino es un flotante"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 5 #"Z=3.8"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 7 #"3.8=3.8"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 65
#";si t1 y t2 no son el mismo termino, donde termino es un flotante"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 5 #"Z=3.8"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 7 #"3.8=4.1"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 81
(
 #";si t1 es un flotante y t2 una expresion a la que no se puede iguala"
 #"r un flotante"
) 0 0 2 29 1 #"\n"
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 14 #"3.8=miregistro"
0 0 22 3 1 #"("
0 0 14 3 8 #"campo1:X"
0 0 2 3 1 #" "
0 0 14 3 8 #"campo2:4"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 17 3 64
#";si t1 es una variable no asignada y t2 es un registro de tipo 1"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 3 #"Rec"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"Rec"
0 0 2 3 1 #" "
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 14 3 10 #"miregistro"
0 0 22 3 1 #"("
0 0 14 3 8 #"campo1:X"
0 0 2 3 1 #" "
0 0 14 3 8 #"campo2:4"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 3 #"Rec"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 64
#";si t1 es una variable ya asignada y t2 es un registro de tipo 1"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 3 #"Rec"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 14 3 10 #"miregistro"
0 0 22 3 1 #"("
0 0 14 3 8 #"campo1:X"
0 0 2 3 1 #" "
0 0 14 3 8 #"campo2:4"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 17 3 64
#";si t1 es una variable no asignada y t2 es un registro de tipo 2"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 3 #"Rec"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"Rec"
0 0 2 3 1 #" "
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 14 3 14 #"pruebaregistro"
0 0 2 3 1 #" "
0 0 14 3 3 #"Rec"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 64
#";si t1 es una variable ya asignada y t2 es un registro de tipo 2"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 3 #"Rec"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 14 3 14 #"pruebaregistro"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 53 #";;si t1 es una variable no asignada y t2 es una lista"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 17 3 1 #" "
0 0 14 3 5 #"Lista"
0 0 17 3 1 #" "
0 0 14 3 2 #"in"
0 0 17 3 1 #" "
0 0 14 3 3 #"set"
0 0 17 3 1 #" "
0 0 14 3 5 #"Lista"
0 0 17 3 1 #" "
0 0 14 3 1 #"="
0 0 17 3 1 #" "
0 0 22 3 1 #"["
0 0 20 3 1 #"1"
0 0 17 3 1 #" "
0 0 20 3 1 #"2"
0 0 17 3 1 #" "
0 0 20 3 1 #"3"
0 0 17 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #"]"
0 0 17 3 1 #" "
0 0 14 3 5 #"Lista"
0 0 17 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 53 #";;si t1 es una variable ya asignada y t2 es una lista"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 17 3 1 #" "
0 0 14 3 5 #"Lista"
0 0 17 3 1 #" "
0 0 14 3 2 #"in"
0 0 17 3 1 #" "
0 0 14 3 3 #"set"
0 0 17 3 1 #" "
0 0 14 3 1 #"X"
0 0 17 3 1 #" "
0 0 14 3 1 #"="
0 0 17 3 1 #" "
0 0 22 3 1 #"["
0 0 20 3 1 #"1"
0 0 17 3 1 #" "
0 0 20 3 1 #"2"
0 0 17 3 1 #" "
0 0 20 3 1 #"3"
0 0 17 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #"]"
0 0 17 3 1 #" "
0 0 14 3 1 #"X"
0 0 17 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 67
#";si t1 es una variable no asignada y t2 es un acceso a un registro "
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 3 #"Rec"
0 0 2 3 1 #" "
0 0 14 3 5 #"Valor"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"Rec"
0 0 2 3 1 #" "
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 14 3 10 #"miregistro"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 17 #"Valor=.Rec.campo1"
0 0 2 3 1 #" "
0 0 14 3 5 #"Valor"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 3 #"Rec"
0 0 2 3 1 #" "
0 0 14 3 5 #"Valor"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"Rec"
0 0 2 3 1 #" "
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 14 3 10 #"miregistro"
0 0 22 3 1 #"("
0 0 14 3 8 #"campo1:X"
0 0 2 3 1 #" "
0 0 14 3 8 #"campo2:4"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 17 #"Valor=.Rec.campo2"
0 0 2 3 1 #" "
0 0 14 3 5 #"Valor"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 68
#";si t1 es una variable ya asignada y t2 es una acceso a un registro "
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 3 #"Rec"
0 0 2 3 1 #" "
0 0 14 3 5 #"Valor"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"Rec"
0 0 2 3 1 #" "
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 14 3 10 #"miregistro"
0 0 22 3 1 #"("
0 0 14 3 8 #"campo1:X"
0 0 2 3 1 #" "
0 0 14 3 8 #"campo2:4"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 13 #"X=.Rec.campo2"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 67
#";si t1 es una variable no asignada y t2 es una funcion con nombre $"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 5 #"Z=fun"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"$"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 17 3 67
#";si t1 es una variable ya asignada y t2 es una funcion con nombre $"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 5 #"X=fun"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"$"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 17 3 75
(
 #";si t1 y t2 son el mismo termino, donde termino es una funcion con n"
 #"ombre $"
) 0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"P"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 2 #"  "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"fun"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"$"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 7 #"end=fun"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"$"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 78
(
 #";si t1 y t2 no son el mismo termino, donde termino es una funcion co"
 #"n nombre $"
) 0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"P"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 2 #"  "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"fun"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"$"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 7 #"end=fun"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"$"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 79
(
 #";si t1 es una variable no asignada y t2 es una funcion con nombre di"
 #"ferente a $"
) 0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 5 #"Z=fun"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 17 3 79
(
 #";si t1 es una variable ya asignada y t2 es una funcion con nombre di"
 #"ferente a $"
) 0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 5 #"X=fun"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 17 3 87
(
 #";si t1 y t2 son el mismo termino, donde termino es una funcion con n"
 #"ombre diferente a $"
) 0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 7 #"Funcion"
0 0 2 3 1 #" "
0 0 14 3 1 #"P"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 2 #"  "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"fun"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 7 #"Funcion"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 7 #"end=fun"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 7 #"Funcion"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 90
(
 #";si t1 y t2 no son el mismo termino, donde termino es una funcion co"
 #"n nombre diferente a $"
) 0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 7 #"Funcion"
0 0 2 3 1 #" "
0 0 14 3 1 #"P"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 2 #"  "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"fun"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 7 #"Funcion"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 7 #"end=fun"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 7 #"Funcion"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 72
(
 #";si t1 es una variable no asignada y t2 es un procedimiento con nomb"
 #"re $"
) 0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 6 #"Z=proc"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"$"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 17 3 72
(
 #";si t1 es una variable ya asignada y t2 es un procedimiento con nomb"
 #"re $"
) 0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 6 #"X=proc"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"$"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 17 3 3 #";si"
0 0 17 3 1 #" "
0 0 17 3 2 #"t1"
0 0 17 3 1 #" "
0 0 17 3 2 #"es"
0 0 17 3 1 #" "
0 0 17 3 3 #"una"
0 0 17 3 1 #" "
0 0 17 3 8 #"variable"
0 0 17 3 1 #" "
0 0 17 3 2 #"no"
0 0 17 3 1 #" "
0 0 17 3 8 #"asignada"
0 0 17 3 1 #" "
0 0 17 3 1 #"y"
0 0 17 3 1 #" "
0 0 17 3 2 #"t2"
0 0 17 3 1 #" "
0 0 17 3 2 #"es"
0 0 17 3 1 #" "
0 0 17 3 2 #"un"
0 0 17 3 39 #" procedimiento con nombre diferente a $"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 6 #"Z=proc"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 17 3 84
(
 #";si t1 es una variable ya asignada y t2 es un procedimiento con nomb"
 #"re diferente a $"
) 0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 6 #"X=proc"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 17 3 3 #";si"
0 0 17 3 1 #" "
0 0 17 3 2 #"t1"
0 0 17 3 1 #" "
0 0 17 3 2 #"es"
0 0 17 3 1 #" "
0 0 17 3 3 #"una"
0 0 17 3 1 #" "
0 0 17 3 8 #"variable"
0 0 17 3 1 #" "
0 0 17 3 2 #"no"
0 0 17 3 1 #" "
0 0 17 3 8 #"asignada"
0 0 17 3 1 #" "
0 0 17 3 1 #"y"
0 0 17 3 32 #" t2 es una aplicacion de funcion"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 7 #"Funcion"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 1 #"P"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"fun"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 7 #"Funcion"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 2 #"=+"
0 0 22 3 1 #"{"
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 2 #"P="
0 0 22 3 1 #"{"
0 0 14 3 7 #"Funcion"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"P"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 2 3 1 #" "
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 7 #"Funcion"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 1 #"P"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"fun"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 7 #"Funcion"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 2 #"=+"
0 0 22 3 1 #"{"
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 7 #"Funcion"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #"}"
0 0 14 3 2 #"=P"
0 0 2 3 1 #" "
0 0 14 3 1 #"P"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 71
(
 #";si t1 es una variable ya asignada y t2 es es una aplicacion de func"
 #"ion"
) 0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 7 #"Funcion"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 1 #"P"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"fun"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 7 #"Funcion"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 2 #"=+"
0 0 22 3 1 #"{"
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 2 #"X="
0 0 22 3 1 #"{"
0 0 14 3 7 #"Funcion"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"P"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 76
(
 #";si t1 y t2 son el mismo termino, donde termino es una aplicacion de"
 #" funcion"
) 0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 7 #"Funcion"
0 0 2 3 1 #" "
0 0 14 3 1 #"P"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"fun"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 7 #"Funcion"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 2 #"=+"
0 0 22 3 1 #"{"
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 7 #"Funcion"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #"}"
0 0 14 3 1 #"="
0 0 22 3 1 #"{"
0 0 14 3 7 #"Funcion"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 79
(
 #";si t1 y t2 no son el mismo termino, donde termino es una aplicacion"
 #" de funcion"
) 0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 7 #"Funcion"
0 0 2 3 1 #" "
0 0 14 3 1 #"P"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"fun"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 7 #"Funcion"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 2 #"=+"
0 0 22 3 1 #"{"
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 7 #"Funcion"
0 0 2 3 1 #" "
0 0 20 3 1 #"9"
0 0 22 3 1 #"}"
0 0 14 3 1 #"="
0 0 22 3 1 #"{"
0 0 14 3 7 #"Funcion"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 109
(
 #";si t1 es una aplicacion de funcion y t2 una expresion a la que no s"
 #"e puede igualar una aplicacion de funcion"
) 0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 7 #"Funcion"
0 0 2 3 1 #" "
0 0 14 3 1 #"P"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 2 #"  "
0 0 14 3 3 #"fun"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 7 #"Funcion"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 2 #"=+"
0 0 22 3 1 #"{"
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 7 #"Funcion"
0 0 2 3 1 #" "
0 0 20 3 1 #"9"
0 0 22 3 1 #"}"
0 0 14 3 4 #"=set"
0 0 2 3 1 #" "
0 0 14 3 3 #"P=2"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 75
(
 #";si t1 es una variable no asignada y t2 es una aplicacion de procedi"
 #"miento "
) 0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 4 #"Proc"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 1 #"P"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 4 #"proc"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 4 #"Proc"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 2 #"=+"
0 0 22 3 1 #"{"
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 2 #"P="
0 0 22 3 1 #"{"
0 0 14 3 4 #"Proc"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"P"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 17 3 75
(
 #";si t1 es una variable ya asignada y t2 es una aplicacion de procedi"
 #"miento "
) 0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 4 #"Proc"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 1 #"P"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 4 #"proc"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 4 #"Proc"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 2 #"=+"
0 0 22 3 1 #"{"
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 2 #"X="
0 0 22 3 1 #"{"
0 0 14 3 4 #"Proc"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"P"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 2 #"  "
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 4 #"Proc"
0 0 2 3 1 #" "
0 0 14 3 1 #"P"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 4 #"proc"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 4 #"Proc"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 2 #"=+"
0 0 22 3 1 #"{"
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 4 #"Proc"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #"}"
0 0 14 3 1 #"="
0 0 22 3 1 #"{"
0 0 14 3 4 #"Proc"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 2 #"  "
0 0 2 29 1 #"\n"
0 0 17 3 57 #";si t1 es una variable no asignada y t2 es un condicional"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"P"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 4 #"P=if"
0 0 2 3 1 #" "
0 0 14 3 2 #">="
0 0 22 3 1 #"{"
0 0 20 3 1 #"4"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 4 #"then"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 2 3 1 #" "
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 20 3 1 #"6"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 14 3 1 #"P"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 57 #";si t1 es una variable ya asignada y t2 es un condicional"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"P"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 4 #"X=if"
0 0 2 3 1 #" "
0 0 14 3 2 #">="
0 0 22 3 1 #"{"
0 0 20 3 1 #"4"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 4 #"then"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 2 3 1 #" "
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 20 3 1 #"6"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 51 #";si t1 es una variable no asignada y t2 es un ciclo"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"P"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 5 #"P=for"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 2 3 1 #" "
0 0 14 3 2 #".."
0 0 2 3 1 #" "
0 0 20 3 2 #"10"
0 0 2 3 1 #" "
0 0 15 3 2 #"do"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"5"
0 0 2 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 2 #"  "
0 0 14 3 1 #"P"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 17 3 67
#";si t1 es una variable no asignada y t2 una aplicacion de primitiva"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #"}"
0 0 14 3 2 #"=Z"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 3 #"   "
0 0 2 29 1 #"\n"
0 0 17 3 67
#";si t1 es una variable ya asignada y t2 una aplicacion de primitiva"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 3 #"X=+"
0 0 22 3 1 #"{"
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 3 #"   "
0 0 2 29 1 #"\n"
0 0 17 3 95
(
 #";si t1 es una variable no asignada y t2 una expresion a la que no se"
 #" puede igualar una variable"
) 0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 1 #"L"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 5 #"Z=set"
0 0 2 3 1 #" "
0 0 14 3 3 #"L=4"
0 0 2 3 1 #" "
0 0 14 3 1 #"Z"
0 0 2 3 1 #" "
0 0 14 3 3 #"end"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 17 3 109
(
 #";Se tomo solamente el caso de unificar registros, donde los campos c"
 #"on el mismo nombre este en el mismo orden"
) 0 0 2 29 1 #"\n"
0 0 17 3 25 #";unificacion de registros"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 2 #"R1"
0 0 2 3 1 #" "
0 0 14 3 2 #"R2"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 29 1 #"\n"
0 0 14 3 2 #"in"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 2 #"R1"
0 0 2 3 1 #" "
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 14 3 4 #"hola"
0 0 22 3 1 #"("
0 0 14 3 3 #"a:X"
0 0 2 3 1 #" "
0 0 14 3 3 #"b:7"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 2 #"R2"
0 0 2 3 1 #" "
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 14 3 4 #"hola"
0 0 22 3 1 #"("
0 0 14 3 3 #"a:2"
0 0 2 3 1 #" "
0 0 14 3 3 #"b:Y"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 5 #"R1=R2"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 14 3 5 #".R1.a"
0 0 2 29 1 #"\n"
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 14 3 2 #"R1"
0 0 2 3 1 #" "
0 0 14 3 2 #"R2"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 29 1 #"\n"
0 0 14 3 2 #"in"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 2 #"R1"
0 0 2 3 1 #" "
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 14 3 4 #"hola"
0 0 22 3 1 #"("
0 0 14 3 3 #"1:X"
0 0 2 3 1 #" "
0 0 14 3 7 #"2:mireg"
0 0 22 3 1 #"("
0 0 14 3 10 #"campo1:8.9"
0 0 2 3 1 #" "
0 0 14 3 8 #"campo2:8"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 2 #"R2"
0 0 2 3 1 #" "
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 14 3 4 #"hola"
0 0 22 3 1 #"("
0 0 14 3 3 #"1:2"
0 0 2 3 1 #" "
0 0 14 3 3 #"2:Y"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 14 3 3 #"set"
0 0 2 3 1 #" "
0 0 14 3 5 #"R1=R2"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 14 3 5 #".R2.2"
0 0 2 29 1 #"\n"
0 0 14 3 3 #"end"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0           0 0 0 4 29 1 #"\n"
0           0
